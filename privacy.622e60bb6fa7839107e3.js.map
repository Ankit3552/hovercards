{"version":3,"sources":["webpack:///privacy.622e60bb6fa7839107e3.js","webpack:///webpack/bootstrap 622e60bb6fa7839107e3?13d4","webpack:///./www/js/privacy.js","webpack:///./~/raven-js/src/utils.js?e0c0","webpack:///./~/json-stringify-safe/stringify.js?d8c1","webpack:///./~/node-libs-browser/~/process/browser.js?494c","webpack:///./~/raven-js/src/configError.js?0b51","webpack:///./~/raven-js/src/console.js?93a0","webpack:///./~/raven-js/src/raven.js?ae06","webpack:///./~/raven-js/src/singleton.js?d49a","webpack:///./~/raven-js/vendor/TraceKit/tracekit.js?153b","webpack:///./report/index.www.js?5870"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","isUndefined","what","isFunction","isString","objectPrototype","toString","isObject","isEmptyObject","_","isError","Error","each","obj","callback","i","j","length","hasKey","objectMerge","obj1","obj2","key","value","truncate","str","max","substr","object","hasOwnProperty","joinRegExp","patterns","pattern","sources","len","push","replace","source","RegExp","join","urlencode","o","pairs","encodeURIComponent","parseUrl","url","match","query","fragment","protocol","host","path","relative","uuid4","crypto","window","msCrypto","getRandomValues","arr","Uint16Array","pad","num","v","r","Math","random","htmlTreeAsString","elem","nextStr","MAX_TRAVERSE_HEIGHT","MAX_OUTPUT_LEN","out","height","separator","sepLength","htmlElementAsString","parentNode","reverse","className","classes","attr","tagName","toLowerCase","split","attrWhitelist","getAttribute","fill","name","replacement","track","orig","Object","prototype","stringify","replacer","spaces","cycleReplacer","JSON","serializer","stack","keys","slice","indexOf","thisPos","this","splice","Infinity","getSerialize","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","e","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","run","Item","array","noop","process","nextTick","args","Array","arguments","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","dir","umask","RavenConfigError","message","constructor","wrapMethod","console","level","originalConsoleLevel","originalConsole","sentryLevel","msg","data","logger","extra","Function","now","Date","Raven","_hasJSON","_hasDocument","document","_lastCapturedException","_lastEventId","_globalServer","_globalKey","_globalProject","_globalContext","_globalOptions","ignoreErrors","ignoreUrls","whitelistUrls","includePaths","crossOrigin","collectWindowErrors","maxMessageLength","stackTraceLimit","autoBreadcrumbs","_ignoreOnError","_isRavenInstalled","_originalErrorStackTraceLimit","_originalConsole","_originalConsoleMethods","_plugins","_startTime","_wrappedBuiltIns","_breadcrumbs","_lastCapturedEvent","_keypressTimeout","_location","location","_lastHref","href","method","TraceKit","utils","wrapConsoleMethod","dsnKeys","dsnPattern","VERSION","debug","config","dsn","options","self","_logDebug","setDSN","maxBreadcrumbs","min","autoBreadcrumbDefaults","xhr","dom","install","isSetup","report","subscribe","_handleOnErrorStackInfo","_instrumentTryCatch","_instrumentBreadcrumbs","_drainPlugins","uri","_parseDSN","lastSlash","lastIndexOf","_dsn","user","_globalSecret","pass","_getGlobalServer","_globalEndpoint","context","func","undefined","wrap","_before","wrapped","deep","_ignoreNextOnError","captureException","__raven__","__raven_wrapper__","property","__inner__","uninstall","_restoreBuiltIns","ex","captureMessage","trimHeadFrames","stacktrace","computeStackTrace","_handleStackInfo","ex1","test","fingerprint","frames","_prepareFrames","_send","captureBreadcrumb","crumb","timestamp","shift","addPlugin","plugin","pluginArgs","setUserContext","setExtraContext","_mergeContext","setTagsContext","tags","clearContext","getContext","parse","setEnvironment","environment","setRelease","release","setDataCallback","original","dataCallback","setShouldSendCallback","shouldSendCallback","setTransport","transport","lastException","lastEventId","ravenNotConfiguredError","afterLoad","RavenConfig","showReportDialog","eventId","encode","qs","email","globalServer","script","createElement","async","src","head","body","appendChild","_triggerEvent","eventType","evt","toUpperCase","createEvent","initEvent","createEventObject","dispatchEvent","fireEvent","_breadcrumbEventHandler","evtName","target","category","_keypressEventHandler","debounceDuration","_captureUrlChange","from","to","parsedLoc","parsedTo","parsedFrom","wrapTimeFn","fn","t","originalCallback","wrapEventTarget","global","proto","capture","secure","handleEvent","err","before","wrappedBuiltIns","requestAnimationFrame","cb","eventTargets","$","jQuery","ready","wrapProp","prop","xhrproto","XMLHttpRequest","origOpen","__raven_xhr","status_code","origSend","onreadystatechangeHandler","readyState","status","type","props","onreadystatechange","addEventListener","attachEvent","chrome","isChromePackagedApp","app","runtime","hasPushState","history","pushState","oldOnPopState","onpopstate","currentHref","origPushState","log","consoleMethodCallback","builtin","installer","exec","allowSecretKey","port","stackInfo","_processException","lineno","frame","_normalizeFrame","in_app","normalized","filename","line","colno","column","function","fileurl","exception","values","culprit","_trimPacket","_getHttpData","httpData","headers","User-Agent","navigator","userAgent","referrer","Referer","globalOptions","baseData","project","platform","request","breadcrumbs","serverName","server_name","_sendProcessedPayload","event_id","auth","sentry_version","sentry_client","sentry_key","sentry_secret","_makeRequest","onSuccess","onError","error","opts","handler","hasCORS","XDomainRequest","onload","open","send","setUser","setReleaseContext","RavenConstructor","_Raven","noConflict","getLocationHref","_slice","UNKNOWN_FUNCTION","ERROR_TYPES_RE","installGlobalHandler","handlers","unsubscribe","unsubscribeAll","uninstallGlobalHandler","notifyHandlers","isWindowError","inner","traceKitWindowOnError","lineNo","colNo","lastExceptionStack","augmentStackTraceWithInitialElement","processLastException","groups","_oldOnerrorHandler","_onErrorHandlerInstalled","onerror","_lastExceptionStack","_lastArgs","lastArgs","rethrow","incomplete","computeStackTraceFromStackProp","parts","element","gecko","winjs","lines","isNative","columnNumber","initial","unshift","partial","computeStackTraceByWalkingCallerChain","depth","item","functionName","funcs","recursion","curr","caller","input","substring","result","sourceURL","fileName","lineNumber","description","SENTRY_DSN_CLIENT","NODE_ENV","npm_package_version"],"mappings":"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","file":"privacy.622e60bb6fa7839107e3.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t__webpack_require__(9);\n\t__webpack_require__(12);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/*eslint no-extra-parens:0*/\n\t'use strict';\n\t\n\tvar objectPrototype = Object.prototype;\n\t\n\tfunction isUndefined(what) {\n\t    return what === void 0;\n\t}\n\t\n\tfunction isFunction(what) {\n\t    return typeof what === 'function';\n\t}\n\t\n\tfunction isString(what) {\n\t    return objectPrototype.toString.call(what) === '[object String]';\n\t}\n\t\n\tfunction isObject(what) {\n\t    return typeof what === 'object' && what !== null;\n\t}\n\t\n\tfunction isEmptyObject(what) {\n\t    for (var _ in what) return false; // eslint-disable-line guard-for-in, no-unused-vars\n\t    return true;\n\t}\n\t\n\t// Sorta yanked from https://github.com/joyent/node/blob/aa3b4b4/lib/util.js#L560\n\t// with some tiny modifications\n\tfunction isError(what) {\n\t    var toString = objectPrototype.toString.call(what);\n\t    return isObject(what) && toString === '[object Error]' || toString === '[object Exception]' || // Firefox NS_ERROR_FAILURE Exceptions\n\t    what instanceof Error;\n\t}\n\t\n\tfunction each(obj, callback) {\n\t    var i, j;\n\t\n\t    if (isUndefined(obj.length)) {\n\t        for (i in obj) {\n\t            if (hasKey(obj, i)) {\n\t                callback.call(null, i, obj[i]);\n\t            }\n\t        }\n\t    } else {\n\t        j = obj.length;\n\t        if (j) {\n\t            for (i = 0; i < j; i++) {\n\t                callback.call(null, i, obj[i]);\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction objectMerge(obj1, obj2) {\n\t    if (!obj2) {\n\t        return obj1;\n\t    }\n\t    each(obj2, function (key, value) {\n\t        obj1[key] = value;\n\t    });\n\t    return obj1;\n\t}\n\t\n\tfunction truncate(str, max) {\n\t    return !max || str.length <= max ? str : str.substr(0, max) + '\\u2026';\n\t}\n\t\n\t/**\n\t * hasKey, a better form of hasOwnProperty\n\t * Example: hasKey(MainHostObject, property) === true/false\n\t *\n\t * @param {Object} host object to check property\n\t * @param {string} key to check\n\t */\n\tfunction hasKey(object, key) {\n\t    return objectPrototype.hasOwnProperty.call(object, key);\n\t}\n\t\n\tfunction joinRegExp(patterns) {\n\t    // Combine an array of regular expressions and strings into one large regexp\n\t    // Be mad.\n\t    var sources = [],\n\t        i = 0,\n\t        len = patterns.length,\n\t        pattern;\n\t\n\t    for (; i < len; i++) {\n\t        pattern = patterns[i];\n\t        if (isString(pattern)) {\n\t            // If it's a string, we need to escape it\n\t            // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n\t            sources.push(pattern.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'));\n\t        } else if (pattern && pattern.source) {\n\t            // If it's a regexp already, we want to extract the source\n\t            sources.push(pattern.source);\n\t        }\n\t        // Intentionally skip other cases\n\t    }\n\t    return new RegExp(sources.join('|'), 'i');\n\t}\n\t\n\tfunction urlencode(o) {\n\t    var pairs = [];\n\t    each(o, function (key, value) {\n\t        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n\t    });\n\t    return pairs.join('&');\n\t}\n\t\n\t// borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n\t// intentionally using regex and not <a/> href parsing trick because React Native and other\n\t// environments where DOM might not be available\n\tfunction parseUrl(url) {\n\t    var match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n\t    if (!match) return {};\n\t\n\t    // coerce to undefined values to empty string so we don't get 'undefined'\n\t    var query = match[6] || '';\n\t    var fragment = match[8] || '';\n\t    return {\n\t        protocol: match[2],\n\t        host: match[4],\n\t        path: match[5],\n\t        relative: match[5] + query + fragment // everything minus origin\n\t    };\n\t}\n\tfunction uuid4() {\n\t    var crypto = window.crypto || window.msCrypto;\n\t\n\t    if (!isUndefined(crypto) && crypto.getRandomValues) {\n\t        // Use window.crypto API if available\n\t        var arr = new Uint16Array(8);\n\t        crypto.getRandomValues(arr);\n\t\n\t        // set 4 in byte 7\n\t        arr[3] = arr[3] & 0xFFF | 0x4000;\n\t        // set 2 most significant bits of byte 9 to '10'\n\t        arr[4] = arr[4] & 0x3FFF | 0x8000;\n\t\n\t        var pad = function (num) {\n\t            var v = num.toString(16);\n\t            while (v.length < 4) {\n\t                v = '0' + v;\n\t            }\n\t            return v;\n\t        };\n\t\n\t        return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) + pad(arr[5]) + pad(arr[6]) + pad(arr[7]);\n\t    } else {\n\t        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n\t        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n\t            var r = Math.random() * 16 | 0,\n\t                v = c === 'x' ? r : r & 0x3 | 0x8;\n\t            return v.toString(16);\n\t        });\n\t    }\n\t}\n\t\n\t/**\n\t * Given a child DOM element, returns a query-selector statement describing that\n\t * and its ancestors\n\t * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n\t * @param elem\n\t * @returns {string}\n\t */\n\tfunction htmlTreeAsString(elem) {\n\t    var MAX_TRAVERSE_HEIGHT = 5,\n\t        MAX_OUTPUT_LEN = 80,\n\t        out = [],\n\t        height = 0,\n\t        len = 0,\n\t        separator = ' > ',\n\t        sepLength = separator.length,\n\t        nextStr;\n\t\n\t    while (elem && height++ < MAX_TRAVERSE_HEIGHT) {\n\t\n\t        nextStr = htmlElementAsString(elem);\n\t        // bail out if\n\t        // - nextStr is the 'html' element\n\t        // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n\t        //   (ignore this limit if we are on the first iteration)\n\t        if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= MAX_OUTPUT_LEN) {\n\t            break;\n\t        }\n\t\n\t        out.push(nextStr);\n\t\n\t        len += nextStr.length;\n\t        elem = elem.parentNode;\n\t    }\n\t\n\t    return out.reverse().join(separator);\n\t}\n\t\n\t/**\n\t * Returns a simple, query-selector representation of a DOM element\n\t * e.g. [HTMLElement] => input#foo.btn[name=baz]\n\t * @param HTMLElement\n\t * @returns {string}\n\t */\n\tfunction htmlElementAsString(elem) {\n\t    var out = [],\n\t        className,\n\t        classes,\n\t        key,\n\t        attr,\n\t        i;\n\t\n\t    if (!elem || !elem.tagName) {\n\t        return '';\n\t    }\n\t\n\t    out.push(elem.tagName.toLowerCase());\n\t    if (elem.id) {\n\t        out.push('#' + elem.id);\n\t    }\n\t\n\t    className = elem.className;\n\t    if (className && isString(className)) {\n\t        classes = className.split(' ');\n\t        for (i = 0; i < classes.length; i++) {\n\t            out.push('.' + classes[i]);\n\t        }\n\t    }\n\t    var attrWhitelist = ['type', 'name', 'title', 'alt'];\n\t    for (i = 0; i < attrWhitelist.length; i++) {\n\t        key = attrWhitelist[i];\n\t        attr = elem.getAttribute(key);\n\t        if (attr) {\n\t            out.push('[' + key + '=\"' + attr + '\"]');\n\t        }\n\t    }\n\t    return out.join('');\n\t}\n\t\n\t/**\n\t * Polyfill a method\n\t * @param obj object e.g. `document`\n\t * @param name method name present on object e.g. `addEventListener`\n\t * @param replacement replacement function\n\t * @param track {optional} record instrumentation to an array\n\t */\n\tfunction fill(obj, name, replacement, track) {\n\t    var orig = obj[name];\n\t    obj[name] = replacement(orig);\n\t    if (track) {\n\t        track.push([obj, name, orig]);\n\t    }\n\t}\n\t\n\tmodule.exports = {\n\t    isUndefined: isUndefined,\n\t    isFunction: isFunction,\n\t    isString: isString,\n\t    isObject: isObject,\n\t    isEmptyObject: isEmptyObject,\n\t    isError: isError,\n\t    each: each,\n\t    objectMerge: objectMerge,\n\t    truncate: truncate,\n\t    hasKey: hasKey,\n\t    joinRegExp: joinRegExp,\n\t    urlencode: urlencode,\n\t    uuid4: uuid4,\n\t    htmlTreeAsString: htmlTreeAsString,\n\t    htmlElementAsString: htmlElementAsString,\n\t    parseUrl: parseUrl,\n\t    fill: fill\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\texports = module.exports = stringify;\n\texports.getSerialize = serializer;\n\t\n\tfunction stringify(obj, replacer, spaces, cycleReplacer) {\n\t  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces);\n\t}\n\t\n\tfunction serializer(replacer, cycleReplacer) {\n\t  var stack = [],\n\t      keys = [];\n\t\n\t  if (cycleReplacer == null) cycleReplacer = function (key, value) {\n\t    if (stack[0] === value) return \"[Circular ~]\";\n\t    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\";\n\t  };\n\t\n\t  return function (key, value) {\n\t    if (stack.length > 0) {\n\t      var thisPos = stack.indexOf(this);\n\t      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n\t      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n\t      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value);\n\t    } else stack.push(value);\n\t\n\t    return replacer == null ? value : replacer.call(this, key, value);\n\t  };\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout() {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t})();\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch (e) {\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch (e) {\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e) {\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e) {\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while (len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () {\n\t    return '/';\n\t};\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function () {\n\t    return 0;\n\t};\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction RavenConfigError(message) {\n\t    this.name = 'RavenConfigError';\n\t    this.message = message;\n\t}\n\tRavenConfigError.prototype = new Error();\n\tRavenConfigError.prototype.constructor = RavenConfigError;\n\t\n\tmodule.exports = RavenConfigError;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar wrapMethod = function (console, level, callback) {\n\t    var originalConsoleLevel = console[level];\n\t    var originalConsole = console;\n\t\n\t    if (!(level in console)) {\n\t        return;\n\t    }\n\t\n\t    var sentryLevel = level === 'warn' ? 'warning' : level;\n\t\n\t    console[level] = function () {\n\t        var args = [].slice.call(arguments);\n\t\n\t        var msg = '' + args.join(' ');\n\t        var data = { level: sentryLevel, logger: 'console', extra: { 'arguments': args } };\n\t        callback && callback(msg, data);\n\t\n\t        // this fails for some browsers. :(\n\t        if (originalConsoleLevel) {\n\t            // IE9 doesn't allow calling apply on console functions directly\n\t            // See: https://stackoverflow.com/questions/5472938/does-ie9-support-console-log-and-is-it-a-real-function#answer-5473193\n\t            Function.prototype.apply.call(originalConsoleLevel, originalConsole, args);\n\t        }\n\t    };\n\t};\n\t\n\tmodule.exports = {\n\t    wrapMethod: wrapMethod\n\t};\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/*global XDomainRequest:false*/\n\t'use strict';\n\t\n\tvar TraceKit = __webpack_require__(8);\n\tvar RavenConfigError = __webpack_require__(4);\n\tvar utils = __webpack_require__(1);\n\tvar stringify = __webpack_require__(2);\n\t\n\tvar isFunction = utils.isFunction;\n\tvar isUndefined = utils.isUndefined;\n\tvar isError = utils.isError;\n\tvar isEmptyObject = utils.isEmptyObject;\n\tvar hasKey = utils.hasKey;\n\tvar joinRegExp = utils.joinRegExp;\n\tvar each = utils.each;\n\tvar objectMerge = utils.objectMerge;\n\tvar truncate = utils.truncate;\n\tvar urlencode = utils.urlencode;\n\tvar uuid4 = utils.uuid4;\n\tvar htmlTreeAsString = utils.htmlTreeAsString;\n\tvar parseUrl = utils.parseUrl;\n\tvar isString = utils.isString;\n\tvar fill = utils.fill;\n\t\n\tvar wrapConsoleMethod = __webpack_require__(5).wrapMethod;\n\t\n\tvar dsnKeys = 'source protocol user pass host port path'.split(' '),\n\t    dsnPattern = /^(?:(\\w+):)?\\/\\/(?:(\\w+)(:\\w+)?@)?([\\w\\.-]+)(?::(\\d+))?(\\/.*)/;\n\t\n\tfunction now() {\n\t    return +new Date();\n\t}\n\t\n\t// First, check for JSON support\n\t// If there is no JSON, we no-op the core features of Raven\n\t// since JSON is required to encode the payload\n\tfunction Raven() {\n\t    this._hasJSON = !!(typeof JSON === 'object' && JSON.stringify);\n\t    // Raven can run in contexts where there's no document (react-native)\n\t    this._hasDocument = typeof document !== 'undefined';\n\t    this._lastCapturedException = null;\n\t    this._lastEventId = null;\n\t    this._globalServer = null;\n\t    this._globalKey = null;\n\t    this._globalProject = null;\n\t    this._globalContext = {};\n\t    this._globalOptions = {\n\t        logger: 'javascript',\n\t        ignoreErrors: [],\n\t        ignoreUrls: [],\n\t        whitelistUrls: [],\n\t        includePaths: [],\n\t        crossOrigin: 'anonymous',\n\t        collectWindowErrors: true,\n\t        maxMessageLength: 0,\n\t        stackTraceLimit: 50,\n\t        autoBreadcrumbs: true\n\t    };\n\t    this._ignoreOnError = 0;\n\t    this._isRavenInstalled = false;\n\t    this._originalErrorStackTraceLimit = Error.stackTraceLimit;\n\t    // capture references to window.console *and* all its methods first\n\t    // before the console plugin has a chance to monkey patch\n\t    this._originalConsole = window.console || {};\n\t    this._originalConsoleMethods = {};\n\t    this._plugins = [];\n\t    this._startTime = now();\n\t    this._wrappedBuiltIns = [];\n\t    this._breadcrumbs = [];\n\t    this._lastCapturedEvent = null;\n\t    this._keypressTimeout;\n\t    this._location = window.location;\n\t    this._lastHref = this._location && this._location.href;\n\t\n\t    for (var method in this._originalConsole) {\n\t        // eslint-disable-line guard-for-in\n\t        this._originalConsoleMethods[method] = this._originalConsole[method];\n\t    }\n\t}\n\t\n\t/*\n\t * The core Raven singleton\n\t *\n\t * @this {Raven}\n\t */\n\t\n\tRaven.prototype = {\n\t    // Hardcode version string so that raven source can be loaded directly via\n\t    // webpack (using a build step causes webpack #1617). Grunt verifies that\n\t    // this value matches package.json during build.\n\t    //   See: https://github.com/getsentry/raven-js/issues/465\n\t    VERSION: '3.7.0',\n\t\n\t    debug: false,\n\t\n\t    TraceKit: TraceKit, // alias to TraceKit\n\t\n\t    /*\n\t     * Configure Raven with a DSN and extra options\n\t     *\n\t     * @param {string} dsn The public Sentry DSN\n\t     * @param {object} options Optional set of of global options [optional]\n\t     * @return {Raven}\n\t     */\n\t    config: function (dsn, options) {\n\t        var self = this;\n\t\n\t        if (this._globalServer) {\n\t            this._logDebug('error', 'Error: Raven has already been configured');\n\t            return this;\n\t        }\n\t        if (!dsn) return this;\n\t\n\t        // merge in options\n\t        if (options) {\n\t            each(options, function (key, value) {\n\t                // tags and extra are special and need to be put into context\n\t                if (key === 'tags' || key === 'extra') {\n\t                    self._globalContext[key] = value;\n\t                } else {\n\t                    self._globalOptions[key] = value;\n\t                }\n\t            });\n\t        }\n\t\n\t        this.setDSN(dsn);\n\t\n\t        // \"Script error.\" is hard coded into browsers for errors that it can't read.\n\t        // this is the result of a script being pulled in from an external domain and CORS.\n\t        this._globalOptions.ignoreErrors.push(/^Script error\\.?$/);\n\t        this._globalOptions.ignoreErrors.push(/^Javascript error: Script error\\.? on line 0$/);\n\t\n\t        // join regexp rules into one big rule\n\t        this._globalOptions.ignoreErrors = joinRegExp(this._globalOptions.ignoreErrors);\n\t        this._globalOptions.ignoreUrls = this._globalOptions.ignoreUrls.length ? joinRegExp(this._globalOptions.ignoreUrls) : false;\n\t        this._globalOptions.whitelistUrls = this._globalOptions.whitelistUrls.length ? joinRegExp(this._globalOptions.whitelistUrls) : false;\n\t        this._globalOptions.includePaths = joinRegExp(this._globalOptions.includePaths);\n\t        this._globalOptions.maxBreadcrumbs = Math.max(0, Math.min(this._globalOptions.maxBreadcrumbs || 100, 100)); // default and hard limit is 100\n\t\n\t        var autoBreadcrumbDefaults = {\n\t            xhr: true,\n\t            console: true,\n\t            dom: true,\n\t            location: true\n\t        };\n\t\n\t        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\t        if ({}.toString.call(autoBreadcrumbs) === '[object Object]') {\n\t            autoBreadcrumbs = objectMerge(autoBreadcrumbDefaults, autoBreadcrumbs);\n\t        } else if (autoBreadcrumbs !== false) {\n\t            autoBreadcrumbs = autoBreadcrumbDefaults;\n\t        }\n\t        this._globalOptions.autoBreadcrumbs = autoBreadcrumbs;\n\t\n\t        TraceKit.collectWindowErrors = !!this._globalOptions.collectWindowErrors;\n\t\n\t        // return for chaining\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Installs a global window.onerror error handler\n\t     * to capture and report uncaught exceptions.\n\t     * At this point, install() is required to be called due\n\t     * to the way TraceKit is set up.\n\t     *\n\t     * @return {Raven}\n\t     */\n\t    install: function () {\n\t        var self = this;\n\t        if (this.isSetup() && !this._isRavenInstalled) {\n\t            TraceKit.report.subscribe(function () {\n\t                self._handleOnErrorStackInfo.apply(self, arguments);\n\t            });\n\t            this._instrumentTryCatch();\n\t            if (self._globalOptions.autoBreadcrumbs) this._instrumentBreadcrumbs();\n\t\n\t            // Install all of the plugins\n\t            this._drainPlugins();\n\t\n\t            this._isRavenInstalled = true;\n\t        }\n\t\n\t        Error.stackTraceLimit = this._globalOptions.stackTraceLimit;\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Set the DSN (can be called multiple time unlike config)\n\t     *\n\t     * @param {string} dsn The public Sentry DSN\n\t     */\n\t    setDSN: function (dsn) {\n\t        var uri = this._parseDSN(dsn),\n\t            lastSlash = uri.path.lastIndexOf('/'),\n\t            path = uri.path.substr(1, lastSlash);\n\t\n\t        this._dsn = dsn;\n\t        this._globalKey = uri.user;\n\t        this._globalSecret = uri.pass && uri.pass.substr(1);\n\t        this._globalProject = uri.path.substr(lastSlash + 1);\n\t\n\t        this._globalServer = this._getGlobalServer(uri);\n\t\n\t        this._globalEndpoint = this._globalServer + '/' + path + 'api/' + this._globalProject + '/store/';\n\t    },\n\t\n\t    /*\n\t     * Wrap code within a context so Raven can capture errors\n\t     * reliably across domains that is executed immediately.\n\t     *\n\t     * @param {object} options A specific set of options for this context [optional]\n\t     * @param {function} func The callback to be immediately executed within the context\n\t     * @param {array} args An array of arguments to be called with the callback [optional]\n\t     */\n\t    context: function (options, func, args) {\n\t        if (isFunction(options)) {\n\t            args = func || [];\n\t            func = options;\n\t            options = undefined;\n\t        }\n\t\n\t        return this.wrap(options, func).apply(this, args);\n\t    },\n\t\n\t    /*\n\t     * Wrap code within a context and returns back a new function to be executed\n\t     *\n\t     * @param {object} options A specific set of options for this context [optional]\n\t     * @param {function} func The function to be wrapped in a new context\n\t     * @param {function} func A function to call before the try/catch wrapper [optional, private]\n\t     * @return {function} The newly wrapped functions with a context\n\t     */\n\t    wrap: function (options, func, _before) {\n\t        var self = this;\n\t        // 1 argument has been passed, and it's not a function\n\t        // so just return it\n\t        if (isUndefined(func) && !isFunction(options)) {\n\t            return options;\n\t        }\n\t\n\t        // options is optional\n\t        if (isFunction(options)) {\n\t            func = options;\n\t            options = undefined;\n\t        }\n\t\n\t        // At this point, we've passed along 2 arguments, and the second one\n\t        // is not a function either, so we'll just return the second argument.\n\t        if (!isFunction(func)) {\n\t            return func;\n\t        }\n\t\n\t        // We don't wanna wrap it twice!\n\t        try {\n\t            if (func.__raven__) {\n\t                return func;\n\t            }\n\t\n\t            // If this has already been wrapped in the past, return that\n\t            if (func.__raven_wrapper__) {\n\t                return func.__raven_wrapper__;\n\t            }\n\t        } catch (e) {\n\t            // Just accessing custom props in some Selenium environments\n\t            // can cause a \"Permission denied\" exception (see raven-js#495).\n\t            // Bail on wrapping and return the function as-is (defers to window.onerror).\n\t            return func;\n\t        }\n\t\n\t        function wrapped() {\n\t            var args = [],\n\t                i = arguments.length,\n\t                deep = !options || options && options.deep !== false;\n\t\n\t            if (_before && isFunction(_before)) {\n\t                _before.apply(this, arguments);\n\t            }\n\t\n\t            // Recursively wrap all of a function's arguments that are\n\t            // functions themselves.\n\t            while (i--) args[i] = deep ? self.wrap(options, arguments[i]) : arguments[i];\n\t\n\t            try {\n\t                return func.apply(this, args);\n\t            } catch (e) {\n\t                self._ignoreNextOnError();\n\t                self.captureException(e, options);\n\t                throw e;\n\t            }\n\t        }\n\t\n\t        // copy over properties of the old function\n\t        for (var property in func) {\n\t            if (hasKey(func, property)) {\n\t                wrapped[property] = func[property];\n\t            }\n\t        }\n\t        wrapped.prototype = func.prototype;\n\t\n\t        func.__raven_wrapper__ = wrapped;\n\t        // Signal that this function has been wrapped already\n\t        // for both debugging and to prevent it to being wrapped twice\n\t        wrapped.__raven__ = true;\n\t        wrapped.__inner__ = func;\n\t\n\t        return wrapped;\n\t    },\n\t\n\t    /*\n\t     * Uninstalls the global error handler.\n\t     *\n\t     * @return {Raven}\n\t     */\n\t    uninstall: function () {\n\t        TraceKit.report.uninstall();\n\t\n\t        this._restoreBuiltIns();\n\t\n\t        Error.stackTraceLimit = this._originalErrorStackTraceLimit;\n\t        this._isRavenInstalled = false;\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Manually capture an exception and send it over to Sentry\n\t     *\n\t     * @param {error} ex An exception to be logged\n\t     * @param {object} options A specific set of options for this error [optional]\n\t     * @return {Raven}\n\t     */\n\t    captureException: function (ex, options) {\n\t        // If not an Error is passed through, recall as a message instead\n\t        if (!isError(ex)) {\n\t            return this.captureMessage(ex, objectMerge({\n\t                trimHeadFrames: 1,\n\t                stacktrace: true // if we fall back to captureMessage, default to attempting a new trace\n\t            }, options));\n\t        }\n\t\n\t        // Store the raw exception object for potential debugging and introspection\n\t        this._lastCapturedException = ex;\n\t\n\t        // TraceKit.report will re-raise any exception passed to it,\n\t        // which means you have to wrap it in try/catch. Instead, we\n\t        // can wrap it here and only re-raise if TraceKit.report\n\t        // raises an exception different from the one we asked to\n\t        // report on.\n\t        try {\n\t            var stack = TraceKit.computeStackTrace(ex);\n\t            this._handleStackInfo(stack, options);\n\t        } catch (ex1) {\n\t            if (ex !== ex1) {\n\t                throw ex1;\n\t            }\n\t        }\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Manually send a message to Sentry\n\t     *\n\t     * @param {string} msg A plain message to be captured in Sentry\n\t     * @param {object} options A specific set of options for this message [optional]\n\t     * @return {Raven}\n\t     */\n\t    captureMessage: function (msg, options) {\n\t        // config() automagically converts ignoreErrors from a list to a RegExp so we need to test for an\n\t        // early call; we'll error on the side of logging anything called before configuration since it's\n\t        // probably something you should see:\n\t        if (!!this._globalOptions.ignoreErrors.test && this._globalOptions.ignoreErrors.test(msg)) {\n\t            return;\n\t        }\n\t\n\t        var data = objectMerge({\n\t            message: msg + '' // Make sure it's actually a string\n\t        }, options);\n\t\n\t        if (options && options.stacktrace) {\n\t            var ex;\n\t            // create a stack trace from this point; just trim\n\t            // off extra frames so they don't include this function call (or\n\t            // earlier Raven.js library fn calls)\n\t            try {\n\t                throw new Error(msg);\n\t            } catch (ex1) {\n\t                ex = ex1;\n\t            }\n\t\n\t            // null exception name so `Error` isn't prefixed to msg\n\t            ex.name = null;\n\t\n\t            options = objectMerge({\n\t                // fingerprint on msg, not stack trace (legacy behavior, could be\n\t                // revisited)\n\t                fingerprint: msg,\n\t                trimHeadFrames: (options.trimHeadFrames || 0) + 1\n\t            }, options);\n\t\n\t            var stack = TraceKit.computeStackTrace(ex);\n\t            var frames = this._prepareFrames(stack, options);\n\t            data.stacktrace = {\n\t                // Sentry expects frames oldest to newest\n\t                frames: frames.reverse()\n\t            };\n\t        }\n\t\n\t        // Fire away!\n\t        this._send(data);\n\t\n\t        return this;\n\t    },\n\t\n\t    captureBreadcrumb: function (obj) {\n\t        var crumb = objectMerge({\n\t            timestamp: now() / 1000\n\t        }, obj);\n\t\n\t        this._breadcrumbs.push(crumb);\n\t        if (this._breadcrumbs.length > this._globalOptions.maxBreadcrumbs) {\n\t            this._breadcrumbs.shift();\n\t        }\n\t        return this;\n\t    },\n\t\n\t    addPlugin: function (plugin /*arg1, arg2, ... argN*/) {\n\t        var pluginArgs = Array.prototype.slice.call(arguments, 1);\n\t\n\t        this._plugins.push([plugin, pluginArgs]);\n\t        if (this._isRavenInstalled) {\n\t            this._drainPlugins();\n\t        }\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Set/clear a user to be sent along with the payload.\n\t     *\n\t     * @param {object} user An object representing user data [optional]\n\t     * @return {Raven}\n\t     */\n\t    setUserContext: function (user) {\n\t        // Intentionally do not merge here since that's an unexpected behavior.\n\t        this._globalContext.user = user;\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Merge extra attributes to be sent along with the payload.\n\t     *\n\t     * @param {object} extra An object representing extra data [optional]\n\t     * @return {Raven}\n\t     */\n\t    setExtraContext: function (extra) {\n\t        this._mergeContext('extra', extra);\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Merge tags to be sent along with the payload.\n\t     *\n\t     * @param {object} tags An object representing tags [optional]\n\t     * @return {Raven}\n\t     */\n\t    setTagsContext: function (tags) {\n\t        this._mergeContext('tags', tags);\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Clear all of the context.\n\t     *\n\t     * @return {Raven}\n\t     */\n\t    clearContext: function () {\n\t        this._globalContext = {};\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Get a copy of the current context. This cannot be mutated.\n\t     *\n\t     * @return {object} copy of context\n\t     */\n\t    getContext: function () {\n\t        // lol javascript\n\t        return JSON.parse(stringify(this._globalContext));\n\t    },\n\t\n\t    /*\n\t     * Set environment of application\n\t     *\n\t     * @param {string} environment Typically something like 'production'.\n\t     * @return {Raven}\n\t     */\n\t    setEnvironment: function (environment) {\n\t        this._globalOptions.environment = environment;\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Set release version of application\n\t     *\n\t     * @param {string} release Typically something like a git SHA to identify version\n\t     * @return {Raven}\n\t     */\n\t    setRelease: function (release) {\n\t        this._globalOptions.release = release;\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Set the dataCallback option\n\t     *\n\t     * @param {function} callback The callback to run which allows the\n\t     *                            data blob to be mutated before sending\n\t     * @return {Raven}\n\t     */\n\t    setDataCallback: function (callback) {\n\t        var original = this._globalOptions.dataCallback;\n\t        this._globalOptions.dataCallback = isFunction(callback) ? function (data) {\n\t            return callback(data, original);\n\t        } : callback;\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Set the shouldSendCallback option\n\t     *\n\t     * @param {function} callback The callback to run which allows\n\t     *                            introspecting the blob before sending\n\t     * @return {Raven}\n\t     */\n\t    setShouldSendCallback: function (callback) {\n\t        var original = this._globalOptions.shouldSendCallback;\n\t        this._globalOptions.shouldSendCallback = isFunction(callback) ? function (data) {\n\t            return callback(data, original);\n\t        } : callback;\n\t\n\t        return this;\n\t    },\n\t\n\t    /**\n\t     * Override the default HTTP transport mechanism that transmits data\n\t     * to the Sentry server.\n\t     *\n\t     * @param {function} transport Function invoked instead of the default\n\t     *                             `makeRequest` handler.\n\t     *\n\t     * @return {Raven}\n\t     */\n\t    setTransport: function (transport) {\n\t        this._globalOptions.transport = transport;\n\t\n\t        return this;\n\t    },\n\t\n\t    /*\n\t     * Get the latest raw exception that was captured by Raven.\n\t     *\n\t     * @return {error}\n\t     */\n\t    lastException: function () {\n\t        return this._lastCapturedException;\n\t    },\n\t\n\t    /*\n\t     * Get the last event id\n\t     *\n\t     * @return {string}\n\t     */\n\t    lastEventId: function () {\n\t        return this._lastEventId;\n\t    },\n\t\n\t    /*\n\t     * Determine if Raven is setup and ready to go.\n\t     *\n\t     * @return {boolean}\n\t     */\n\t    isSetup: function () {\n\t        if (!this._hasJSON) return false; // needs JSON support\n\t        if (!this._globalServer) {\n\t            if (!this.ravenNotConfiguredError) {\n\t                this.ravenNotConfiguredError = true;\n\t                this._logDebug('error', 'Error: Raven has not been configured.');\n\t            }\n\t            return false;\n\t        }\n\t        return true;\n\t    },\n\t\n\t    afterLoad: function () {\n\t        // TODO: remove window dependence?\n\t\n\t        // Attempt to initialize Raven on load\n\t        var RavenConfig = window.RavenConfig;\n\t        if (RavenConfig) {\n\t            this.config(RavenConfig.dsn, RavenConfig.config).install();\n\t        }\n\t    },\n\t\n\t    showReportDialog: function (options) {\n\t        if (!window.document) // doesn't work without a document (React native)\n\t            return;\n\t\n\t        options = options || {};\n\t\n\t        var lastEventId = options.eventId || this.lastEventId();\n\t        if (!lastEventId) {\n\t            throw new RavenConfigError('Missing eventId');\n\t        }\n\t\n\t        var dsn = options.dsn || this._dsn;\n\t        if (!dsn) {\n\t            throw new RavenConfigError('Missing DSN');\n\t        }\n\t\n\t        var encode = encodeURIComponent;\n\t        var qs = '';\n\t        qs += '?eventId=' + encode(lastEventId);\n\t        qs += '&dsn=' + encode(dsn);\n\t\n\t        var user = options.user || this._globalContext.user;\n\t        if (user) {\n\t            if (user.name) qs += '&name=' + encode(user.name);\n\t            if (user.email) qs += '&email=' + encode(user.email);\n\t        }\n\t\n\t        var globalServer = this._getGlobalServer(this._parseDSN(dsn));\n\t\n\t        var script = document.createElement('script');\n\t        script.async = true;\n\t        script.src = globalServer + '/api/embed/error-page/' + qs;\n\t        (document.head || document.body).appendChild(script);\n\t    },\n\t\n\t    /**** Private functions ****/\n\t    _ignoreNextOnError: function () {\n\t        var self = this;\n\t        this._ignoreOnError += 1;\n\t        setTimeout(function () {\n\t            // onerror should trigger before setTimeout\n\t            self._ignoreOnError -= 1;\n\t        });\n\t    },\n\t\n\t    _triggerEvent: function (eventType, options) {\n\t        // NOTE: `event` is a native browser thing, so let's avoid conflicting wiht it\n\t        var evt, key;\n\t\n\t        if (!this._hasDocument) return;\n\t\n\t        options = options || {};\n\t\n\t        eventType = 'raven' + eventType.substr(0, 1).toUpperCase() + eventType.substr(1);\n\t\n\t        if (document.createEvent) {\n\t            evt = document.createEvent('HTMLEvents');\n\t            evt.initEvent(eventType, true, true);\n\t        } else {\n\t            evt = document.createEventObject();\n\t            evt.eventType = eventType;\n\t        }\n\t\n\t        for (key in options) if (hasKey(options, key)) {\n\t            evt[key] = options[key];\n\t        }\n\t\n\t        if (document.createEvent) {\n\t            // IE9 if standards\n\t            document.dispatchEvent(evt);\n\t        } else {\n\t            // IE8 regardless of Quirks or Standards\n\t            // IE9 if quirks\n\t            try {\n\t                document.fireEvent('on' + evt.eventType.toLowerCase(), evt);\n\t            } catch (e) {\n\t                // Do nothing\n\t            }\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Wraps addEventListener to capture UI breadcrumbs\n\t     * @param evtName the event name (e.g. \"click\")\n\t     * @returns {Function}\n\t     * @private\n\t     */\n\t    _breadcrumbEventHandler: function (evtName) {\n\t        var self = this;\n\t        return function (evt) {\n\t            // reset keypress timeout; e.g. triggering a 'click' after\n\t            // a 'keypress' will reset the keypress debounce so that a new\n\t            // set of keypresses can be recorded\n\t            self._keypressTimeout = null;\n\t\n\t            // It's possible this handler might trigger multiple times for the same\n\t            // event (e.g. event propagation through node ancestors). Ignore if we've\n\t            // already captured the event.\n\t            if (self._lastCapturedEvent === evt) return;\n\t\n\t            self._lastCapturedEvent = evt;\n\t            var elem = evt.target;\n\t\n\t            var target;\n\t\n\t            // try/catch htmlTreeAsString because it's particularly complicated, and\n\t            // just accessing the DOM incorrectly can throw an exception in some circumstances.\n\t            try {\n\t                target = htmlTreeAsString(elem);\n\t            } catch (e) {\n\t                target = '<unknown>';\n\t            }\n\t\n\t            self.captureBreadcrumb({\n\t                category: 'ui.' + evtName, // e.g. ui.click, ui.input\n\t                message: target\n\t            });\n\t        };\n\t    },\n\t\n\t    /**\n\t     * Wraps addEventListener to capture keypress UI events\n\t     * @returns {Function}\n\t     * @private\n\t     */\n\t    _keypressEventHandler: function () {\n\t        var self = this,\n\t            debounceDuration = 1000; // milliseconds\n\t\n\t        // TODO: if somehow user switches keypress target before\n\t        //       debounce timeout is triggered, we will only capture\n\t        //       a single breadcrumb from the FIRST target (acceptable?)\n\t\n\t        return function (evt) {\n\t            var target = evt.target,\n\t                tagName = target && target.tagName;\n\t\n\t            // only consider keypress events on actual input elements\n\t            // this will disregard keypresses targeting body (e.g. tabbing\n\t            // through elements, hotkeys, etc)\n\t            if (!tagName || tagName !== 'INPUT' && tagName !== 'TEXTAREA') return;\n\t\n\t            // record first keypress in a series, but ignore subsequent\n\t            // keypresses until debounce clears\n\t            var timeout = self._keypressTimeout;\n\t            if (!timeout) {\n\t                self._breadcrumbEventHandler('input')(evt);\n\t            }\n\t            clearTimeout(timeout);\n\t            self._keypressTimeout = setTimeout(function () {\n\t                self._keypressTimeout = null;\n\t            }, debounceDuration);\n\t        };\n\t    },\n\t\n\t    /**\n\t     * Captures a breadcrumb of type \"navigation\", normalizing input URLs\n\t     * @param to the originating URL\n\t     * @param from the target URL\n\t     * @private\n\t     */\n\t    _captureUrlChange: function (from, to) {\n\t        var parsedLoc = parseUrl(this._location.href);\n\t        var parsedTo = parseUrl(to);\n\t        var parsedFrom = parseUrl(from);\n\t\n\t        // because onpopstate only tells you the \"new\" (to) value of location.href, and\n\t        // not the previous (from) value, we need to track the value of the current URL\n\t        // state ourselves\n\t        this._lastHref = to;\n\t\n\t        // Use only the path component of the URL if the URL matches the current\n\t        // document (almost all the time when using pushState)\n\t        if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) to = parsedTo.relative;\n\t        if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) from = parsedFrom.relative;\n\t\n\t        this.captureBreadcrumb({\n\t            category: 'navigation',\n\t            data: {\n\t                to: to,\n\t                from: from\n\t            }\n\t        });\n\t    },\n\t\n\t    /**\n\t     * Install any queued plugins\n\t     */\n\t    _instrumentTryCatch: function () {\n\t        var self = this;\n\t\n\t        var wrappedBuiltIns = self._wrappedBuiltIns;\n\t\n\t        function wrapTimeFn(orig) {\n\t            return function (fn, t) {\n\t                // preserve arity\n\t                // Make a copy of the arguments to prevent deoptimization\n\t                // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n\t                var args = new Array(arguments.length);\n\t                for (var i = 0; i < args.length; ++i) {\n\t                    args[i] = arguments[i];\n\t                }\n\t                var originalCallback = args[0];\n\t                if (isFunction(originalCallback)) {\n\t                    args[0] = self.wrap(originalCallback);\n\t                }\n\t\n\t                // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n\t                // also supports only two arguments and doesn't care what this is, so we\n\t                // can just call the original function directly.\n\t                if (orig.apply) {\n\t                    return orig.apply(this, args);\n\t                } else {\n\t                    return orig(args[0], args[1]);\n\t                }\n\t            };\n\t        }\n\t\n\t        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\t\n\t        function wrapEventTarget(global) {\n\t            var proto = window[global] && window[global].prototype;\n\t            if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {\n\t                fill(proto, 'addEventListener', function (orig) {\n\t                    return function (evtName, fn, capture, secure) {\n\t                        // preserve arity\n\t                        try {\n\t                            if (fn && fn.handleEvent) {\n\t                                fn.handleEvent = self.wrap(fn.handleEvent);\n\t                            }\n\t                        } catch (err) {}\n\t                        // can sometimes get 'Permission denied to access property \"handle Event'\n\t\n\t\n\t                        // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`\n\t                        // so that we don't have more than one wrapper function\n\t                        var before;\n\t                        if (autoBreadcrumbs && autoBreadcrumbs.dom && (global === 'EventTarget' || global === 'Node')) {\n\t                            if (evtName === 'click') {\n\t                                before = self._breadcrumbEventHandler(evtName);\n\t                            } else if (evtName === 'keypress') {\n\t                                before = self._keypressEventHandler();\n\t                            }\n\t                        }\n\t                        return orig.call(this, evtName, self.wrap(fn, undefined, before), capture, secure);\n\t                    };\n\t                }, wrappedBuiltIns);\n\t                fill(proto, 'removeEventListener', function (orig) {\n\t                    return function (evt, fn, capture, secure) {\n\t                        try {\n\t                            fn = fn && (fn.__raven_wrapper__ ? fn.__raven_wrapper__ : fn);\n\t                        } catch (e) {\n\t                            // ignore, accessing __raven_wrapper__ will throw in some Selenium environments\n\t                        }\n\t                        return orig.call(this, evt, fn, capture, secure);\n\t                    };\n\t                }, wrappedBuiltIns);\n\t            }\n\t        }\n\t\n\t        fill(window, 'setTimeout', wrapTimeFn, wrappedBuiltIns);\n\t        fill(window, 'setInterval', wrapTimeFn, wrappedBuiltIns);\n\t        if (window.requestAnimationFrame) {\n\t            fill(window, 'requestAnimationFrame', function (orig) {\n\t                return function (cb) {\n\t                    return orig(self.wrap(cb));\n\t                };\n\t            }, wrappedBuiltIns);\n\t        }\n\t\n\t        // event targets borrowed from bugsnag-js:\n\t        // https://github.com/bugsnag/bugsnag-js/blob/master/src/bugsnag.js#L666\n\t        var eventTargets = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];\n\t        for (var i = 0; i < eventTargets.length; i++) {\n\t            wrapEventTarget(eventTargets[i]);\n\t        }\n\t\n\t        var $ = window.jQuery || window.$;\n\t        if ($ && $.fn && $.fn.ready) {\n\t            fill($.fn, 'ready', function (orig) {\n\t                return function (fn) {\n\t                    return orig.call(this, self.wrap(fn));\n\t                };\n\t            }, wrappedBuiltIns);\n\t        }\n\t    },\n\t\n\t    /**\n\t     * Instrument browser built-ins w/ breadcrumb capturing\n\t     *  - XMLHttpRequests\n\t     *  - DOM interactions (click/typing)\n\t     *  - window.location changes\n\t     *  - console\n\t     *\n\t     * Can be disabled or individually configured via the `autoBreadcrumbs` config option\n\t     */\n\t    _instrumentBreadcrumbs: function () {\n\t        var self = this;\n\t        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\t\n\t        var wrappedBuiltIns = self._wrappedBuiltIns;\n\t\n\t        function wrapProp(prop, xhr) {\n\t            if (prop in xhr && isFunction(xhr[prop])) {\n\t                fill(xhr, prop, function (orig) {\n\t                    return self.wrap(orig);\n\t                }); // intentionally don't track filled methods on XHR instances\n\t            }\n\t        }\n\t\n\t        if (autoBreadcrumbs.xhr && 'XMLHttpRequest' in window) {\n\t            var xhrproto = XMLHttpRequest.prototype;\n\t            fill(xhrproto, 'open', function (origOpen) {\n\t                return function (method, url) {\n\t                    // preserve arity\n\t\n\t                    // if Sentry key appears in URL, don't capture\n\t                    if (isString(url) && url.indexOf(self._globalKey) === -1) {\n\t                        this.__raven_xhr = {\n\t                            method: method,\n\t                            url: url,\n\t                            status_code: null\n\t                        };\n\t                    }\n\t\n\t                    return origOpen.apply(this, arguments);\n\t                };\n\t            }, wrappedBuiltIns);\n\t\n\t            fill(xhrproto, 'send', function (origSend) {\n\t                return function (data) {\n\t                    // preserve arity\n\t                    var xhr = this;\n\t\n\t                    function onreadystatechangeHandler() {\n\t                        if (xhr.__raven_xhr && (xhr.readyState === 1 || xhr.readyState === 4)) {\n\t                            try {\n\t                                // touching statusCode in some platforms throws\n\t                                // an exception\n\t                                xhr.__raven_xhr.status_code = xhr.status;\n\t                            } catch (e) {/* do nothing */}\n\t                            self.captureBreadcrumb({\n\t                                type: 'http',\n\t                                category: 'xhr',\n\t                                data: xhr.__raven_xhr\n\t                            });\n\t                        }\n\t                    }\n\t\n\t                    var props = ['onload', 'onerror', 'onprogress'];\n\t                    for (var j = 0; j < props.length; j++) {\n\t                        wrapProp(props[j], xhr);\n\t                    }\n\t\n\t                    if ('onreadystatechange' in xhr && isFunction(xhr.onreadystatechange)) {\n\t                        fill(xhr, 'onreadystatechange', function (orig) {\n\t                            return self.wrap(orig, undefined, onreadystatechangeHandler);\n\t                        } /* intentionally don't track this instrumentation */);\n\t                    } else {\n\t                        // if onreadystatechange wasn't actually set by the page on this xhr, we\n\t                        // are free to set our own and capture the breadcrumb\n\t                        xhr.onreadystatechange = onreadystatechangeHandler;\n\t                    }\n\t\n\t                    return origSend.apply(this, arguments);\n\t                };\n\t            }, wrappedBuiltIns);\n\t        }\n\t\n\t        // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n\t        // to the document. Do this before we instrument addEventListener.\n\t        if (autoBreadcrumbs.dom && this._hasDocument) {\n\t            if (document.addEventListener) {\n\t                document.addEventListener('click', self._breadcrumbEventHandler('click'), false);\n\t                document.addEventListener('keypress', self._keypressEventHandler(), false);\n\t            } else {\n\t                // IE8 Compatibility\n\t                document.attachEvent('onclick', self._breadcrumbEventHandler('click'));\n\t                document.attachEvent('onkeypress', self._keypressEventHandler());\n\t            }\n\t        }\n\t\n\t        // record navigation (URL) changes\n\t        // NOTE: in Chrome App environment, touching history.pushState, *even inside\n\t        //       a try/catch block*, will cause Chrome to output an error to console.error\n\t        // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n\t        var chrome = window.chrome;\n\t        var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n\t        var hasPushState = !isChromePackagedApp && window.history && history.pushState;\n\t        if (autoBreadcrumbs.location && hasPushState) {\n\t            // TODO: remove onpopstate handler on uninstall()\n\t            var oldOnPopState = window.onpopstate;\n\t            window.onpopstate = function () {\n\t                var currentHref = self._location.href;\n\t                self._captureUrlChange(self._lastHref, currentHref);\n\t\n\t                if (oldOnPopState) {\n\t                    return oldOnPopState.apply(this, arguments);\n\t                }\n\t            };\n\t\n\t            fill(history, 'pushState', function (origPushState) {\n\t                // note history.pushState.length is 0; intentionally not declaring\n\t                // params to preserve 0 arity\n\t                return function () /* state, title, url */{\n\t                    var url = arguments.length > 2 ? arguments[2] : undefined;\n\t\n\t                    // url argument is optional\n\t                    if (url) {\n\t                        // coerce to string (this is what pushState does)\n\t                        self._captureUrlChange(self._lastHref, url + '');\n\t                    }\n\t\n\t                    return origPushState.apply(this, arguments);\n\t                };\n\t            }, wrappedBuiltIns);\n\t        }\n\t\n\t        if (autoBreadcrumbs.console && 'console' in window && console.log) {\n\t            // console\n\t            var consoleMethodCallback = function (msg, data) {\n\t                self.captureBreadcrumb({\n\t                    message: msg,\n\t                    level: data.level,\n\t                    category: 'console'\n\t                });\n\t            };\n\t\n\t            each(['debug', 'info', 'warn', 'error', 'log'], function (_, level) {\n\t                wrapConsoleMethod(console, level, consoleMethodCallback);\n\t            });\n\t        }\n\t    },\n\t\n\t    _restoreBuiltIns: function () {\n\t        // restore any wrapped builtins\n\t        var builtin;\n\t        while (this._wrappedBuiltIns.length) {\n\t            builtin = this._wrappedBuiltIns.shift();\n\t\n\t            var obj = builtin[0],\n\t                name = builtin[1],\n\t                orig = builtin[2];\n\t\n\t            obj[name] = orig;\n\t        }\n\t    },\n\t\n\t    _drainPlugins: function () {\n\t        var self = this;\n\t\n\t        // FIX ME TODO\n\t        each(this._plugins, function (_, plugin) {\n\t            var installer = plugin[0];\n\t            var args = plugin[1];\n\t            installer.apply(self, [self].concat(args));\n\t        });\n\t    },\n\t\n\t    _parseDSN: function (str) {\n\t        var m = dsnPattern.exec(str),\n\t            dsn = {},\n\t            i = 7;\n\t\n\t        try {\n\t            while (i--) dsn[dsnKeys[i]] = m[i] || '';\n\t        } catch (e) {\n\t            throw new RavenConfigError('Invalid DSN: ' + str);\n\t        }\n\t\n\t        if (dsn.pass && !this._globalOptions.allowSecretKey) {\n\t            throw new RavenConfigError('Do not specify your secret key in the DSN. See: http://bit.ly/raven-secret-key');\n\t        }\n\t\n\t        return dsn;\n\t    },\n\t\n\t    _getGlobalServer: function (uri) {\n\t        // assemble the endpoint from the uri pieces\n\t        var globalServer = '//' + uri.host + (uri.port ? ':' + uri.port : '');\n\t\n\t        if (uri.protocol) {\n\t            globalServer = uri.protocol + ':' + globalServer;\n\t        }\n\t        return globalServer;\n\t    },\n\t\n\t    _handleOnErrorStackInfo: function () {\n\t        // if we are intentionally ignoring errors via onerror, bail out\n\t        if (!this._ignoreOnError) {\n\t            this._handleStackInfo.apply(this, arguments);\n\t        }\n\t    },\n\t\n\t    _handleStackInfo: function (stackInfo, options) {\n\t        var frames = this._prepareFrames(stackInfo, options);\n\t\n\t        this._triggerEvent('handle', {\n\t            stackInfo: stackInfo,\n\t            options: options\n\t        });\n\t\n\t        this._processException(stackInfo.name, stackInfo.message, stackInfo.url, stackInfo.lineno, frames, options);\n\t    },\n\t\n\t    _prepareFrames: function (stackInfo, options) {\n\t        var self = this;\n\t        var frames = [];\n\t        if (stackInfo.stack && stackInfo.stack.length) {\n\t            each(stackInfo.stack, function (i, stack) {\n\t                var frame = self._normalizeFrame(stack);\n\t                if (frame) {\n\t                    frames.push(frame);\n\t                }\n\t            });\n\t\n\t            // e.g. frames captured via captureMessage throw\n\t            if (options && options.trimHeadFrames) {\n\t                for (var j = 0; j < options.trimHeadFrames && j < frames.length; j++) {\n\t                    frames[j].in_app = false;\n\t                }\n\t            }\n\t        }\n\t        frames = frames.slice(0, this._globalOptions.stackTraceLimit);\n\t        return frames;\n\t    },\n\t\n\t    _normalizeFrame: function (frame) {\n\t        if (!frame.url) return;\n\t\n\t        // normalize the frames data\n\t        var normalized = {\n\t            filename: frame.url,\n\t            lineno: frame.line,\n\t            colno: frame.column,\n\t            'function': frame.func || '?'\n\t        };\n\t\n\t        normalized.in_app = !( // determine if an exception came from outside of our app\n\t        // first we check the global includePaths list.\n\t        !!this._globalOptions.includePaths.test && !this._globalOptions.includePaths.test(normalized.filename) ||\n\t        // Now we check for fun, if the function name is Raven or TraceKit\n\t        /(Raven|TraceKit)\\./.test(normalized['function']) ||\n\t        // finally, we do a last ditch effort and check for raven.min.js\n\t        /raven\\.(min\\.)?js$/.test(normalized.filename));\n\t\n\t        return normalized;\n\t    },\n\t\n\t    _processException: function (type, message, fileurl, lineno, frames, options) {\n\t        var stacktrace;\n\t        if (!!this._globalOptions.ignoreErrors.test && this._globalOptions.ignoreErrors.test(message)) return;\n\t\n\t        message += '';\n\t\n\t        if (frames && frames.length) {\n\t            fileurl = frames[0].filename || fileurl;\n\t            // Sentry expects frames oldest to newest\n\t            // and JS sends them as newest to oldest\n\t            frames.reverse();\n\t            stacktrace = { frames: frames };\n\t        } else if (fileurl) {\n\t            stacktrace = {\n\t                frames: [{\n\t                    filename: fileurl,\n\t                    lineno: lineno,\n\t                    in_app: true\n\t                }]\n\t            };\n\t        }\n\t\n\t        if (!!this._globalOptions.ignoreUrls.test && this._globalOptions.ignoreUrls.test(fileurl)) return;\n\t        if (!!this._globalOptions.whitelistUrls.test && !this._globalOptions.whitelistUrls.test(fileurl)) return;\n\t\n\t        var data = objectMerge({\n\t            // sentry.interfaces.Exception\n\t            exception: {\n\t                values: [{\n\t                    type: type,\n\t                    value: message,\n\t                    stacktrace: stacktrace\n\t                }]\n\t            },\n\t            culprit: fileurl\n\t        }, options);\n\t\n\t        // Fire away!\n\t        this._send(data);\n\t    },\n\t\n\t    _trimPacket: function (data) {\n\t        // For now, we only want to truncate the two different messages\n\t        // but this could/should be expanded to just trim everything\n\t        var max = this._globalOptions.maxMessageLength;\n\t        if (data.message) {\n\t            data.message = truncate(data.message, max);\n\t        }\n\t        if (data.exception) {\n\t            var exception = data.exception.values[0];\n\t            exception.value = truncate(exception.value, max);\n\t        }\n\t\n\t        return data;\n\t    },\n\t\n\t    _getHttpData: function () {\n\t        if (!this._hasDocument || !document.location || !document.location.href) {\n\t            return;\n\t        }\n\t\n\t        var httpData = {\n\t            headers: {\n\t                'User-Agent': navigator.userAgent\n\t            }\n\t        };\n\t\n\t        httpData.url = document.location.href;\n\t\n\t        if (document.referrer) {\n\t            httpData.headers.Referer = document.referrer;\n\t        }\n\t\n\t        return httpData;\n\t    },\n\t\n\t    _send: function (data) {\n\t        var globalOptions = this._globalOptions;\n\t\n\t        var baseData = {\n\t            project: this._globalProject,\n\t            logger: globalOptions.logger,\n\t            platform: 'javascript'\n\t        },\n\t            httpData = this._getHttpData();\n\t\n\t        if (httpData) {\n\t            baseData.request = httpData;\n\t        }\n\t\n\t        // HACK: delete `trimHeadFrames` to prevent from appearing in outbound payload\n\t        if (data.trimHeadFrames) delete data.trimHeadFrames;\n\t\n\t        data = objectMerge(baseData, data);\n\t\n\t        // Merge in the tags and extra separately since objectMerge doesn't handle a deep merge\n\t        data.tags = objectMerge(objectMerge({}, this._globalContext.tags), data.tags);\n\t        data.extra = objectMerge(objectMerge({}, this._globalContext.extra), data.extra);\n\t\n\t        // Send along our own collected metadata with extra\n\t        data.extra['session:duration'] = now() - this._startTime;\n\t\n\t        if (this._breadcrumbs && this._breadcrumbs.length > 0) {\n\t            // intentionally make shallow copy so that additions\n\t            // to breadcrumbs aren't accidentally sent in this request\n\t            data.breadcrumbs = {\n\t                values: [].slice.call(this._breadcrumbs, 0)\n\t            };\n\t        }\n\t\n\t        // If there are no tags/extra, strip the key from the payload alltogther.\n\t        if (isEmptyObject(data.tags)) delete data.tags;\n\t\n\t        if (this._globalContext.user) {\n\t            // sentry.interfaces.User\n\t            data.user = this._globalContext.user;\n\t        }\n\t\n\t        // Include the environment if it's defined in globalOptions\n\t        if (globalOptions.environment) data.environment = globalOptions.environment;\n\t\n\t        // Include the release if it's defined in globalOptions\n\t        if (globalOptions.release) data.release = globalOptions.release;\n\t\n\t        // Include server_name if it's defined in globalOptions\n\t        if (globalOptions.serverName) data.server_name = globalOptions.serverName;\n\t\n\t        if (isFunction(globalOptions.dataCallback)) {\n\t            data = globalOptions.dataCallback(data) || data;\n\t        }\n\t\n\t        // Why??????????\n\t        if (!data || isEmptyObject(data)) {\n\t            return;\n\t        }\n\t\n\t        // Check if the request should be filtered or not\n\t        if (isFunction(globalOptions.shouldSendCallback) && !globalOptions.shouldSendCallback(data)) {\n\t            return;\n\t        }\n\t\n\t        this._sendProcessedPayload(data);\n\t    },\n\t\n\t    _sendProcessedPayload: function (data, callback) {\n\t        var self = this;\n\t        var globalOptions = this._globalOptions;\n\t\n\t        // Send along an event_id if not explicitly passed.\n\t        // This event_id can be used to reference the error within Sentry itself.\n\t        // Set lastEventId after we know the error should actually be sent\n\t        this._lastEventId = data.event_id || (data.event_id = uuid4());\n\t\n\t        // Try and clean up the packet before sending by truncating long values\n\t        data = this._trimPacket(data);\n\t\n\t        this._logDebug('debug', 'Raven about to send:', data);\n\t\n\t        if (!this.isSetup()) return;\n\t\n\t        var auth = {\n\t            sentry_version: '7',\n\t            sentry_client: 'raven-js/' + this.VERSION,\n\t            sentry_key: this._globalKey\n\t        };\n\t        if (this._globalSecret) {\n\t            auth.sentry_secret = this._globalSecret;\n\t        }\n\t\n\t        var exception = data.exception && data.exception.values[0];\n\t        this.captureBreadcrumb({\n\t            category: 'sentry',\n\t            message: exception ? (exception.type ? exception.type + ': ' : '') + exception.value : data.message,\n\t            event_id: data.event_id,\n\t            level: data.level || 'error' // presume error unless specified\n\t        });\n\t\n\t        var url = this._globalEndpoint;\n\t        (globalOptions.transport || this._makeRequest).call(this, {\n\t            url: url,\n\t            auth: auth,\n\t            data: data,\n\t            options: globalOptions,\n\t            onSuccess: function success() {\n\t                self._triggerEvent('success', {\n\t                    data: data,\n\t                    src: url\n\t                });\n\t                callback && callback();\n\t            },\n\t            onError: function failure(error) {\n\t                self._triggerEvent('failure', {\n\t                    data: data,\n\t                    src: url\n\t                });\n\t                error = error || new Error('Raven send failed (no additional details provided)');\n\t                callback && callback(error);\n\t            }\n\t        });\n\t    },\n\t\n\t    _makeRequest: function (opts) {\n\t        var request = new XMLHttpRequest();\n\t\n\t        // if browser doesn't support CORS (e.g. IE7), we are out of luck\n\t        var hasCORS = 'withCredentials' in request || typeof XDomainRequest !== 'undefined';\n\t\n\t        if (!hasCORS) return;\n\t\n\t        var url = opts.url;\n\t        function handler() {\n\t            if (request.status === 200) {\n\t                if (opts.onSuccess) {\n\t                    opts.onSuccess();\n\t                }\n\t            } else if (opts.onError) {\n\t                opts.onError(new Error('Sentry error code: ' + request.status));\n\t            }\n\t        }\n\t\n\t        if ('withCredentials' in request) {\n\t            request.onreadystatechange = function () {\n\t                if (request.readyState !== 4) {\n\t                    return;\n\t                }\n\t                handler();\n\t            };\n\t        } else {\n\t            request = new XDomainRequest();\n\t            // xdomainrequest cannot go http -> https (or vice versa),\n\t            // so always use protocol relative\n\t            url = url.replace(/^https?:/, '');\n\t\n\t            // onreadystatechange not supported by XDomainRequest\n\t            request.onload = handler;\n\t        }\n\t\n\t        // NOTE: auth is intentionally sent as part of query string (NOT as custom\n\t        //       HTTP header) so as to avoid preflight CORS requests\n\t        request.open('POST', url + '?' + urlencode(opts.auth));\n\t        request.send(stringify(opts.data));\n\t    },\n\t\n\t    _logDebug: function (level) {\n\t        if (this._originalConsoleMethods[level] && this.debug) {\n\t            // In IE<10 console methods do not have their own 'apply' method\n\t            Function.prototype.apply.call(this._originalConsoleMethods[level], this._originalConsole, [].slice.call(arguments, 1));\n\t        }\n\t    },\n\t\n\t    _mergeContext: function (key, context) {\n\t        if (isUndefined(context)) {\n\t            delete this._globalContext[key];\n\t        } else {\n\t            this._globalContext[key] = objectMerge(this._globalContext[key] || {}, context);\n\t        }\n\t    }\n\t};\n\t\n\t// Deprecations\n\tRaven.prototype.setUser = Raven.prototype.setUserContext;\n\tRaven.prototype.setReleaseContext = Raven.prototype.setRelease;\n\t\n\tmodule.exports = Raven;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Enforces a single instance of the Raven client, and the\n\t * main entry point for Raven. If you are a consumer of the\n\t * Raven library, you SHOULD load this file (vs raven.js).\n\t **/\n\t\n\t'use strict';\n\t\n\tvar RavenConstructor = __webpack_require__(6);\n\t\n\tvar _Raven = window.Raven;\n\t\n\tvar Raven = new RavenConstructor();\n\t\n\t/*\n\t * Allow multiple versions of Raven to be installed.\n\t * Strip Raven from the global context and returns the instance.\n\t *\n\t * @return {Raven}\n\t */\n\tRaven.noConflict = function () {\n\t  window.Raven = _Raven;\n\t  return Raven;\n\t};\n\t\n\tRaven.afterLoad();\n\t\n\tmodule.exports = Raven;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(1);\n\t\n\tvar hasKey = utils.hasKey;\n\tvar isString = utils.isString;\n\tvar isUndefined = utils.isUndefined;\n\t\n\t/*\n\t TraceKit - Cross brower stack traces - github.com/occ/TraceKit\n\t MIT license\n\t*/\n\t\n\tvar TraceKit = {\n\t    collectWindowErrors: true,\n\t    debug: false\n\t};\n\t\n\t// global reference to slice\n\tvar _slice = [].slice;\n\tvar UNKNOWN_FUNCTION = '?';\n\t\n\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\n\tvar ERROR_TYPES_RE = /^(?:Uncaught (?:exception: )?)?((?:Eval|Internal|Range|Reference|Syntax|Type|URI)Error): ?(.*)$/;\n\t\n\tfunction getLocationHref() {\n\t    if (typeof document === 'undefined') return '';\n\t\n\t    return document.location.href;\n\t}\n\t\n\t/**\n\t * TraceKit.report: cross-browser processing of unhandled exceptions\n\t *\n\t * Syntax:\n\t *   TraceKit.report.subscribe(function(stackInfo) { ... })\n\t *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n\t *   TraceKit.report(exception)\n\t *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n\t *\n\t * Supports:\n\t *   - Firefox: full stack trace with line numbers, plus column number\n\t *              on top frame; column number is not guaranteed\n\t *   - Opera:   full stack trace with line and column numbers\n\t *   - Chrome:  full stack trace with line and column numbers\n\t *   - Safari:  line and column number for the top frame only; some frames\n\t *              may be missing, and column number is not guaranteed\n\t *   - IE:      line and column number for the top frame only; some frames\n\t *              may be missing, and column number is not guaranteed\n\t *\n\t * In theory, TraceKit should work on all of the following versions:\n\t *   - IE5.5+ (only 8.0 tested)\n\t *   - Firefox 0.9+ (only 3.5+ tested)\n\t *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n\t *     Exceptions Have Stacktrace to be enabled in opera:config)\n\t *   - Safari 3+ (only 4+ tested)\n\t *   - Chrome 1+ (only 5+ tested)\n\t *   - Konqueror 3.5+ (untested)\n\t *\n\t * Requires TraceKit.computeStackTrace.\n\t *\n\t * Tries to catch all unhandled exceptions and report them to the\n\t * subscribed handlers. Please note that TraceKit.report will rethrow the\n\t * exception. This is REQUIRED in order to get a useful stack trace in IE.\n\t * If the exception does not reach the top of the browser, you will only\n\t * get a stack trace from the point where TraceKit.report was called.\n\t *\n\t * Handlers receive a stackInfo object as described in the\n\t * TraceKit.computeStackTrace docs.\n\t */\n\tTraceKit.report = function reportModuleWrapper() {\n\t    var handlers = [],\n\t        lastArgs = null,\n\t        lastException = null,\n\t        lastExceptionStack = null;\n\t\n\t    /**\n\t     * Add a crash handler.\n\t     * @param {Function} handler\n\t     */\n\t    function subscribe(handler) {\n\t        installGlobalHandler();\n\t        handlers.push(handler);\n\t    }\n\t\n\t    /**\n\t     * Remove a crash handler.\n\t     * @param {Function} handler\n\t     */\n\t    function unsubscribe(handler) {\n\t        for (var i = handlers.length - 1; i >= 0; --i) {\n\t            if (handlers[i] === handler) {\n\t                handlers.splice(i, 1);\n\t            }\n\t        }\n\t    }\n\t\n\t    /**\n\t     * Remove all crash handlers.\n\t     */\n\t    function unsubscribeAll() {\n\t        uninstallGlobalHandler();\n\t        handlers = [];\n\t    }\n\t\n\t    /**\n\t     * Dispatch stack information to all handlers.\n\t     * @param {Object.<string, *>} stack\n\t     */\n\t    function notifyHandlers(stack, isWindowError) {\n\t        var exception = null;\n\t        if (isWindowError && !TraceKit.collectWindowErrors) {\n\t            return;\n\t        }\n\t        for (var i in handlers) {\n\t            if (hasKey(handlers, i)) {\n\t                try {\n\t                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n\t                } catch (inner) {\n\t                    exception = inner;\n\t                }\n\t            }\n\t        }\n\t\n\t        if (exception) {\n\t            throw exception;\n\t        }\n\t    }\n\t\n\t    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\t\n\t    /**\n\t     * Ensures all global unhandled exceptions are recorded.\n\t     * Supported by Gecko and IE.\n\t     * @param {string} message Error message.\n\t     * @param {string} url URL of script that generated the exception.\n\t     * @param {(number|string)} lineNo The line number at which the error\n\t     * occurred.\n\t     * @param {?(number|string)} colNo The column number at which the error\n\t     * occurred.\n\t     * @param {?Error} ex The actual Error object.\n\t     */\n\t    function traceKitWindowOnError(message, url, lineNo, colNo, ex) {\n\t        var stack = null;\n\t\n\t        if (lastExceptionStack) {\n\t            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n\t            processLastException();\n\t        } else if (ex) {\n\t            // New chrome and blink send along a real error object\n\t            // Let's just report that like a normal error.\n\t            // See: https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror\n\t            stack = TraceKit.computeStackTrace(ex);\n\t            notifyHandlers(stack, true);\n\t        } else {\n\t            var location = {\n\t                'url': url,\n\t                'line': lineNo,\n\t                'column': colNo\n\t            };\n\t\n\t            var name = undefined;\n\t            var msg = message; // must be new var or will modify original `arguments`\n\t            var groups;\n\t            if (isString(message)) {\n\t                var groups = message.match(ERROR_TYPES_RE);\n\t                if (groups) {\n\t                    name = groups[1];\n\t                    msg = groups[2];\n\t                }\n\t            }\n\t\n\t            location.func = UNKNOWN_FUNCTION;\n\t\n\t            stack = {\n\t                'name': name,\n\t                'message': msg,\n\t                'url': getLocationHref(),\n\t                'stack': [location]\n\t            };\n\t            notifyHandlers(stack, true);\n\t        }\n\t\n\t        if (_oldOnerrorHandler) {\n\t            return _oldOnerrorHandler.apply(this, arguments);\n\t        }\n\t\n\t        return false;\n\t    }\n\t\n\t    function installGlobalHandler() {\n\t        if (_onErrorHandlerInstalled) {\n\t            return;\n\t        }\n\t        _oldOnerrorHandler = window.onerror;\n\t        window.onerror = traceKitWindowOnError;\n\t        _onErrorHandlerInstalled = true;\n\t    }\n\t\n\t    function uninstallGlobalHandler() {\n\t        if (!_onErrorHandlerInstalled) {\n\t            return;\n\t        }\n\t        window.onerror = _oldOnerrorHandler;\n\t        _onErrorHandlerInstalled = false;\n\t        _oldOnerrorHandler = undefined;\n\t    }\n\t\n\t    function processLastException() {\n\t        var _lastExceptionStack = lastExceptionStack,\n\t            _lastArgs = lastArgs;\n\t        lastArgs = null;\n\t        lastExceptionStack = null;\n\t        lastException = null;\n\t        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n\t    }\n\t\n\t    /**\n\t     * Reports an unhandled Error to TraceKit.\n\t     * @param {Error} ex\n\t     * @param {?boolean} rethrow If false, do not re-throw the exception.\n\t     * Only used for window.onerror to not cause an infinite loop of\n\t     * rethrowing.\n\t     */\n\t    function report(ex, rethrow) {\n\t        var args = _slice.call(arguments, 1);\n\t        if (lastExceptionStack) {\n\t            if (lastException === ex) {\n\t                return; // already caught by an inner catch block, ignore\n\t            } else {\n\t                processLastException();\n\t            }\n\t        }\n\t\n\t        var stack = TraceKit.computeStackTrace(ex);\n\t        lastExceptionStack = stack;\n\t        lastException = ex;\n\t        lastArgs = args;\n\t\n\t        // If the stack trace is incomplete, wait for 2 seconds for\n\t        // slow slow IE to see if onerror occurs or not before reporting\n\t        // this exception; otherwise, we will end up with an incomplete\n\t        // stack trace\n\t        window.setTimeout(function () {\n\t            if (lastException === ex) {\n\t                processLastException();\n\t            }\n\t        }, stack.incomplete ? 2000 : 0);\n\t\n\t        if (rethrow !== false) {\n\t            throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n\t        }\n\t    }\n\t\n\t    report.subscribe = subscribe;\n\t    report.unsubscribe = unsubscribe;\n\t    report.uninstall = unsubscribeAll;\n\t    return report;\n\t}();\n\t\n\t/**\n\t * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n\t *\n\t * Syntax:\n\t *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n\t * Returns:\n\t *   s.name              - exception name\n\t *   s.message           - exception message\n\t *   s.stack[i].url      - JavaScript or HTML file URL\n\t *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n\t *   s.stack[i].args     - arguments passed to the function, if known\n\t *   s.stack[i].line     - line number, if known\n\t *   s.stack[i].column   - column number, if known\n\t *\n\t * Supports:\n\t *   - Firefox:  full stack trace with line numbers and unreliable column\n\t *               number on top frame\n\t *   - Opera 10: full stack trace with line and column numbers\n\t *   - Opera 9-: full stack trace with line numbers\n\t *   - Chrome:   full stack trace with line and column numbers\n\t *   - Safari:   line and column number for the topmost stacktrace element\n\t *               only\n\t *   - IE:       no line numbers whatsoever\n\t *\n\t * Tries to guess names of anonymous functions by looking for assignments\n\t * in the source code. In IE and Safari, we have to guess source file names\n\t * by searching for function bodies inside all page scripts. This will not\n\t * work for scripts that are loaded cross-domain.\n\t * Here be dragons: some function names may be guessed incorrectly, and\n\t * duplicate functions may be mismatched.\n\t *\n\t * TraceKit.computeStackTrace should only be used for tracing purposes.\n\t * Logging of unhandled exceptions should be done with TraceKit.report,\n\t * which builds on top of TraceKit.computeStackTrace and provides better\n\t * IE support by utilizing the window.onerror event to retrieve information\n\t * about the top of the stack.\n\t *\n\t * Note: In IE and Safari, no stack trace is recorded on the Error object,\n\t * so computeStackTrace instead walks its *own* chain of callers.\n\t * This means that:\n\t *  * in Safari, some methods may be missing from the stack trace;\n\t *  * in IE, the topmost function in the stack trace will always be the\n\t *    caller of computeStackTrace.\n\t *\n\t * This is okay for tracing (because you are likely to be calling\n\t * computeStackTrace from the function you want to be the topmost element\n\t * of the stack trace anyway), but not okay for logging unhandled\n\t * exceptions (because your catch block will likely be far away from the\n\t * inner function that actually caused the exception).\n\t *\n\t */\n\tTraceKit.computeStackTrace = function computeStackTraceWrapper() {\n\t    /**\n\t     * Escapes special characters, except for whitespace, in a string to be\n\t     * used inside a regular expression as a string literal.\n\t     * @param {string} text The string.\n\t     * @return {string} The escaped string literal.\n\t     */\n\t    function escapeRegExp(text) {\n\t        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n\t    }\n\t\n\t    /**\n\t     * Escapes special characters in a string to be used inside a regular\n\t     * expression as a string literal. Also ensures that HTML entities will\n\t     * be matched the same as their literal friends.\n\t     * @param {string} body The string.\n\t     * @return {string} The escaped string.\n\t     */\n\t    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n\t        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n\t    }\n\t\n\t    // Contents of Exception in various browsers.\n\t    //\n\t    // SAFARI:\n\t    // ex.message = Can't find variable: qq\n\t    // ex.line = 59\n\t    // ex.sourceId = 580238192\n\t    // ex.sourceURL = http://...\n\t    // ex.expressionBeginOffset = 96\n\t    // ex.expressionCaretOffset = 98\n\t    // ex.expressionEndOffset = 98\n\t    // ex.name = ReferenceError\n\t    //\n\t    // FIREFOX:\n\t    // ex.message = qq is not defined\n\t    // ex.fileName = http://...\n\t    // ex.lineNumber = 59\n\t    // ex.columnNumber = 69\n\t    // ex.stack = ...stack trace... (see the example below)\n\t    // ex.name = ReferenceError\n\t    //\n\t    // CHROME:\n\t    // ex.message = qq is not defined\n\t    // ex.name = ReferenceError\n\t    // ex.type = not_defined\n\t    // ex.arguments = ['aa']\n\t    // ex.stack = ...stack trace...\n\t    //\n\t    // INTERNET EXPLORER:\n\t    // ex.message = ...\n\t    // ex.name = ReferenceError\n\t    //\n\t    // OPERA:\n\t    // ex.message = ...message... (see the example below)\n\t    // ex.name = ReferenceError\n\t    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n\t    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\t\n\t    /**\n\t     * Computes stack trace information from the stack property.\n\t     * Chrome and Gecko use this property.\n\t     * @param {Error} ex\n\t     * @return {?Object.<string, *>} Stack trace information.\n\t     */\n\t    function computeStackTraceFromStackProp(ex) {\n\t        if (isUndefined(ex.stack) || !ex.stack) return;\n\t\n\t        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|<anonymous>).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n\t            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n\t            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n\t            lines = ex.stack.split('\\n'),\n\t            stack = [],\n\t            parts,\n\t            element,\n\t            reference = /^(.*) is undefined$/.exec(ex.message);\n\t\n\t        for (var i = 0, j = lines.length; i < j; ++i) {\n\t            if (parts = chrome.exec(lines[i])) {\n\t                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n\t                element = {\n\t                    'url': !isNative ? parts[2] : null,\n\t                    'func': parts[1] || UNKNOWN_FUNCTION,\n\t                    'args': isNative ? [parts[2]] : [],\n\t                    'line': parts[3] ? +parts[3] : null,\n\t                    'column': parts[4] ? +parts[4] : null\n\t                };\n\t            } else if (parts = winjs.exec(lines[i])) {\n\t                element = {\n\t                    'url': parts[2],\n\t                    'func': parts[1] || UNKNOWN_FUNCTION,\n\t                    'args': [],\n\t                    'line': +parts[3],\n\t                    'column': parts[4] ? +parts[4] : null\n\t                };\n\t            } else if (parts = gecko.exec(lines[i])) {\n\t                element = {\n\t                    'url': parts[3],\n\t                    'func': parts[1] || UNKNOWN_FUNCTION,\n\t                    'args': parts[2] ? parts[2].split(',') : [],\n\t                    'line': parts[4] ? +parts[4] : null,\n\t                    'column': parts[5] ? +parts[5] : null\n\t                };\n\t            } else {\n\t                continue;\n\t            }\n\t\n\t            if (!element.func && element.line) {\n\t                element.func = UNKNOWN_FUNCTION;\n\t            }\n\t\n\t            stack.push(element);\n\t        }\n\t\n\t        if (!stack.length) {\n\t            return null;\n\t        }\n\t\n\t        if (!stack[0].column && !isUndefined(ex.columnNumber)) {\n\t            // FireFox uses this awesome columnNumber property for its top frame\n\t            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n\t            // so adding 1\n\t            stack[0].column = ex.columnNumber + 1;\n\t        }\n\t\n\t        return {\n\t            'name': ex.name,\n\t            'message': ex.message,\n\t            'url': getLocationHref(),\n\t            'stack': stack\n\t        };\n\t    }\n\t\n\t    /**\n\t     * Adds information about the first frame to incomplete stack traces.\n\t     * Safari and IE require this to get complete data on the first frame.\n\t     * @param {Object.<string, *>} stackInfo Stack trace information from\n\t     * one of the compute* methods.\n\t     * @param {string} url The URL of the script that caused an error.\n\t     * @param {(number|string)} lineNo The line number of the script that\n\t     * caused an error.\n\t     * @param {string=} message The error generated by the browser, which\n\t     * hopefully contains the name of the object that caused the error.\n\t     * @return {boolean} Whether or not the stack information was\n\t     * augmented.\n\t     */\n\t    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n\t        var initial = {\n\t            'url': url,\n\t            'line': lineNo\n\t        };\n\t\n\t        if (initial.url && initial.line) {\n\t            stackInfo.incomplete = false;\n\t\n\t            if (!initial.func) {\n\t                initial.func = UNKNOWN_FUNCTION;\n\t            }\n\t\n\t            if (stackInfo.stack.length > 0) {\n\t                if (stackInfo.stack[0].url === initial.url) {\n\t                    if (stackInfo.stack[0].line === initial.line) {\n\t                        return false; // already in stack trace\n\t                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n\t                        stackInfo.stack[0].line = initial.line;\n\t                        return false;\n\t                    }\n\t                }\n\t            }\n\t\n\t            stackInfo.stack.unshift(initial);\n\t            stackInfo.partial = true;\n\t            return true;\n\t        } else {\n\t            stackInfo.incomplete = true;\n\t        }\n\t\n\t        return false;\n\t    }\n\t\n\t    /**\n\t     * Computes stack trace information by walking the arguments.caller\n\t     * chain at the time the exception occurred. This will cause earlier\n\t     * frames to be missed but is the only way to get any stack trace in\n\t     * Safari and IE. The top frame is restored by\n\t     * {@link augmentStackTraceWithInitialElement}.\n\t     * @param {Error} ex\n\t     * @return {?Object.<string, *>} Stack trace information.\n\t     */\n\t    function computeStackTraceByWalkingCallerChain(ex, depth) {\n\t        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n\t            stack = [],\n\t            funcs = {},\n\t            recursion = false,\n\t            parts,\n\t            item,\n\t            source;\n\t\n\t        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n\t            if (curr === computeStackTrace || curr === TraceKit.report) {\n\t                // console.log('skipping internal function');\n\t                continue;\n\t            }\n\t\n\t            item = {\n\t                'url': null,\n\t                'func': UNKNOWN_FUNCTION,\n\t                'line': null,\n\t                'column': null\n\t            };\n\t\n\t            if (curr.name) {\n\t                item.func = curr.name;\n\t            } else if (parts = functionName.exec(curr.toString())) {\n\t                item.func = parts[1];\n\t            }\n\t\n\t            if (typeof item.func === 'undefined') {\n\t                try {\n\t                    item.func = parts.input.substring(0, parts.input.indexOf('{'));\n\t                } catch (e) {}\n\t            }\n\t\n\t            if (funcs['' + curr]) {\n\t                recursion = true;\n\t            } else {\n\t                funcs['' + curr] = true;\n\t            }\n\t\n\t            stack.push(item);\n\t        }\n\t\n\t        if (depth) {\n\t            // console.log('depth is ' + depth);\n\t            // console.log('stack is ' + stack.length);\n\t            stack.splice(0, depth);\n\t        }\n\t\n\t        var result = {\n\t            'name': ex.name,\n\t            'message': ex.message,\n\t            'url': getLocationHref(),\n\t            'stack': stack\n\t        };\n\t        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n\t        return result;\n\t    }\n\t\n\t    /**\n\t     * Computes a stack trace for an exception.\n\t     * @param {Error} ex\n\t     * @param {(string|number)=} depth\n\t     */\n\t    function computeStackTrace(ex, depth) {\n\t        var stack = null;\n\t        depth = depth == null ? 0 : +depth;\n\t\n\t        try {\n\t            stack = computeStackTraceFromStackProp(ex);\n\t            if (stack) {\n\t                return stack;\n\t            }\n\t        } catch (e) {\n\t            if (TraceKit.debug) {\n\t                throw e;\n\t            }\n\t        }\n\t\n\t        try {\n\t            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n\t            if (stack) {\n\t                return stack;\n\t            }\n\t        } catch (e) {\n\t            if (TraceKit.debug) {\n\t                throw e;\n\t            }\n\t        }\n\t\n\t        return {\n\t            'name': ex.name,\n\t            'message': ex.message,\n\t            'url': getLocationHref()\n\t        };\n\t    }\n\t\n\t    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n\t    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n\t\n\t    return computeStackTrace;\n\t}();\n\t\n\tmodule.exports = TraceKit;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process) {var Raven = __webpack_require__(7);\n\t\n\tRaven.config(process.env.SENTRY_DSN_CLIENT, {\n\t\tenvironment: process.env.NODE_ENV,\n\t\trelease: process.env.npm_package_version\n\t}).install();\n\t\n\tmodule.exports = Raven;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ },\n/* 10 */,\n/* 11 */,\n/* 12 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** privacy.622e60bb6fa7839107e3.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 622e60bb6fa7839107e3\n **/","require('../../report');\nrequire('../css/privacy.css');\n\n\n\n/** WEBPACK FOOTER **\n ** ./www/js/privacy.js\n **/","/*eslint no-extra-parens:0*/\n'use strict';\n\nvar objectPrototype = Object.prototype;\n\nfunction isUndefined(what) {\n    return what === void 0;\n}\n\nfunction isFunction(what) {\n    return typeof what === 'function';\n}\n\nfunction isString(what) {\n    return objectPrototype.toString.call(what) === '[object String]';\n}\n\nfunction isObject(what) {\n    return typeof what === 'object' && what !== null;\n}\n\nfunction isEmptyObject(what) {\n    for (var _ in what) return false;  // eslint-disable-line guard-for-in, no-unused-vars\n    return true;\n}\n\n// Sorta yanked from https://github.com/joyent/node/blob/aa3b4b4/lib/util.js#L560\n// with some tiny modifications\nfunction isError(what) {\n    var toString = objectPrototype.toString.call(what);\n    return isObject(what) &&\n        toString === '[object Error]' ||\n        toString === '[object Exception]' || // Firefox NS_ERROR_FAILURE Exceptions\n        what instanceof Error;\n}\n\nfunction each(obj, callback) {\n    var i, j;\n\n    if (isUndefined(obj.length)) {\n        for (i in obj) {\n            if (hasKey(obj, i)) {\n                callback.call(null, i, obj[i]);\n            }\n        }\n    } else {\n        j = obj.length;\n        if (j) {\n            for (i = 0; i < j; i++) {\n                callback.call(null, i, obj[i]);\n            }\n        }\n    }\n}\n\nfunction objectMerge(obj1, obj2) {\n    if (!obj2) {\n        return obj1;\n    }\n    each(obj2, function(key, value){\n        obj1[key] = value;\n    });\n    return obj1;\n}\n\nfunction truncate(str, max) {\n    return !max || str.length <= max ? str : str.substr(0, max) + '\\u2026';\n}\n\n/**\n * hasKey, a better form of hasOwnProperty\n * Example: hasKey(MainHostObject, property) === true/false\n *\n * @param {Object} host object to check property\n * @param {string} key to check\n */\nfunction hasKey(object, key) {\n    return objectPrototype.hasOwnProperty.call(object, key);\n}\n\nfunction joinRegExp(patterns) {\n    // Combine an array of regular expressions and strings into one large regexp\n    // Be mad.\n    var sources = [],\n        i = 0, len = patterns.length,\n        pattern;\n\n    for (; i < len; i++) {\n        pattern = patterns[i];\n        if (isString(pattern)) {\n            // If it's a string, we need to escape it\n            // Taken from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n            sources.push(pattern.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'));\n        } else if (pattern && pattern.source) {\n            // If it's a regexp already, we want to extract the source\n            sources.push(pattern.source);\n        }\n        // Intentionally skip other cases\n    }\n    return new RegExp(sources.join('|'), 'i');\n}\n\nfunction urlencode(o) {\n    var pairs = [];\n    each(o, function(key, value) {\n        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\n    });\n    return pairs.join('&');\n}\n\n// borrowed from https://tools.ietf.org/html/rfc3986#appendix-B\n// intentionally using regex and not <a/> href parsing trick because React Native and other\n// environments where DOM might not be available\nfunction parseUrl(url) {\n    var match = url.match(/^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?$/);\n    if (!match) return {};\n\n    // coerce to undefined values to empty string so we don't get 'undefined'\n    var query = match[6] || '';\n    var fragment = match[8] || '';\n    return {\n        protocol: match[2],\n        host: match[4],\n        path: match[5],\n        relative: match[5] + query + fragment // everything minus origin\n    };\n}\nfunction uuid4() {\n    var crypto = window.crypto || window.msCrypto;\n\n    if (!isUndefined(crypto) && crypto.getRandomValues) {\n        // Use window.crypto API if available\n        var arr = new Uint16Array(8);\n        crypto.getRandomValues(arr);\n\n        // set 4 in byte 7\n        arr[3] = arr[3] & 0xFFF | 0x4000;\n        // set 2 most significant bits of byte 9 to '10'\n        arr[4] = arr[4] & 0x3FFF | 0x8000;\n\n        var pad = function(num) {\n            var v = num.toString(16);\n            while (v.length < 4) {\n                v = '0' + v;\n            }\n            return v;\n        };\n\n        return pad(arr[0]) + pad(arr[1]) + pad(arr[2]) + pad(arr[3]) + pad(arr[4]) +\n        pad(arr[5]) + pad(arr[6]) + pad(arr[7]);\n    } else {\n        // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n        return 'xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            var r = Math.random()*16|0,\n                v = c === 'x' ? r : r&0x3|0x8;\n            return v.toString(16);\n        });\n    }\n}\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @param elem\n * @returns {string}\n */\nfunction htmlTreeAsString(elem) {\n    var MAX_TRAVERSE_HEIGHT = 5,\n        MAX_OUTPUT_LEN = 80,\n        out = [],\n        height = 0,\n        len = 0,\n        separator = ' > ',\n        sepLength = separator.length,\n        nextStr;\n\n    while (elem && height++ < MAX_TRAVERSE_HEIGHT) {\n\n        nextStr = htmlElementAsString(elem);\n        // bail out if\n        // - nextStr is the 'html' element\n        // - the length of the string that would be created exceeds MAX_OUTPUT_LEN\n        //   (ignore this limit if we are on the first iteration)\n        if (nextStr === 'html' || height > 1 && len + (out.length * sepLength) + nextStr.length >= MAX_OUTPUT_LEN) {\n            break;\n        }\n\n        out.push(nextStr);\n\n        len += nextStr.length;\n        elem = elem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @param HTMLElement\n * @returns {string}\n */\nfunction htmlElementAsString(elem) {\n    var out = [],\n        className,\n        classes,\n        key,\n        attr,\n        i;\n\n    if (!elem || !elem.tagName) {\n        return '';\n    }\n\n    out.push(elem.tagName.toLowerCase());\n    if (elem.id) {\n        out.push('#' + elem.id);\n    }\n\n    className = elem.className;\n    if (className && isString(className)) {\n        classes = className.split(' ');\n        for (i = 0; i < classes.length; i++) {\n            out.push('.' + classes[i]);\n        }\n    }\n    var attrWhitelist = ['type', 'name', 'title', 'alt'];\n    for (i = 0; i < attrWhitelist.length; i++) {\n        key = attrWhitelist[i];\n        attr = elem.getAttribute(key);\n        if (attr) {\n            out.push('[' + key + '=\"' + attr + '\"]');\n        }\n    }\n    return out.join('');\n}\n\n/**\n * Polyfill a method\n * @param obj object e.g. `document`\n * @param name method name present on object e.g. `addEventListener`\n * @param replacement replacement function\n * @param track {optional} record instrumentation to an array\n */\nfunction fill(obj, name, replacement, track) {\n    var orig = obj[name];\n    obj[name] = replacement(orig);\n    if (track) {\n        track.push([obj, name, orig]);\n    }\n}\n\nmodule.exports = {\n    isUndefined: isUndefined,\n    isFunction: isFunction,\n    isString: isString,\n    isObject: isObject,\n    isEmptyObject: isEmptyObject,\n    isError: isError,\n    each: each,\n    objectMerge: objectMerge,\n    truncate: truncate,\n    hasKey: hasKey,\n    joinRegExp: joinRegExp,\n    urlencode: urlencode,\n    uuid4: uuid4,\n    htmlTreeAsString: htmlTreeAsString,\n    htmlElementAsString: htmlElementAsString,\n    parseUrl: parseUrl,\n    fill: fill\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/raven-js/src/utils.js\n **/","exports = module.exports = stringify\nexports.getSerialize = serializer\n\nfunction stringify(obj, replacer, spaces, cycleReplacer) {\n  return JSON.stringify(obj, serializer(replacer, cycleReplacer), spaces)\n}\n\nfunction serializer(replacer, cycleReplacer) {\n  var stack = [], keys = []\n\n  if (cycleReplacer == null) cycleReplacer = function(key, value) {\n    if (stack[0] === value) return \"[Circular ~]\"\n    return \"[Circular ~.\" + keys.slice(0, stack.indexOf(value)).join(\".\") + \"]\"\n  }\n\n  return function(key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this)\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\n      if (~stack.indexOf(value)) value = cycleReplacer.call(this, key, value)\n    }\n    else stack.push(value)\n\n    return replacer == null ? value : replacer.call(this, key, value)\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/json-stringify-safe/stringify.js\n **/","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/node-libs-browser/~/process/browser.js\n **/","'use strict';\n\nfunction RavenConfigError(message) {\n    this.name = 'RavenConfigError';\n    this.message = message;\n}\nRavenConfigError.prototype = new Error();\nRavenConfigError.prototype.constructor = RavenConfigError;\n\nmodule.exports = RavenConfigError;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/raven-js/src/configError.js\n **/","'use strict';\n\nvar wrapMethod = function(console, level, callback) {\n    var originalConsoleLevel = console[level];\n    var originalConsole = console;\n\n    if (!(level in console)) {\n        return;\n    }\n\n    var sentryLevel = level === 'warn'\n        ? 'warning'\n        : level;\n\n    console[level] = function () {\n        var args = [].slice.call(arguments);\n\n        var msg = '' + args.join(' ');\n        var data = {level: sentryLevel, logger: 'console', extra: {'arguments': args}};\n        callback && callback(msg, data);\n\n        // this fails for some browsers. :(\n        if (originalConsoleLevel) {\n            // IE9 doesn't allow calling apply on console functions directly\n            // See: https://stackoverflow.com/questions/5472938/does-ie9-support-console-log-and-is-it-a-real-function#answer-5473193\n            Function.prototype.apply.call(\n                originalConsoleLevel,\n                originalConsole,\n                args\n            );\n        }\n    };\n};\n\nmodule.exports = {\n    wrapMethod: wrapMethod\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/raven-js/src/console.js\n **/","/*global XDomainRequest:false*/\n'use strict';\n\nvar TraceKit = require('../vendor/TraceKit/tracekit');\nvar RavenConfigError = require('./configError');\nvar utils = require('./utils');\nvar stringify = require('json-stringify-safe');\n\nvar isFunction = utils.isFunction;\nvar isUndefined = utils.isUndefined;\nvar isError = utils.isError;\nvar isEmptyObject = utils.isEmptyObject;\nvar hasKey = utils.hasKey;\nvar joinRegExp = utils.joinRegExp;\nvar each = utils.each;\nvar objectMerge = utils.objectMerge;\nvar truncate = utils.truncate;\nvar urlencode = utils.urlencode;\nvar uuid4 = utils.uuid4;\nvar htmlTreeAsString = utils.htmlTreeAsString;\nvar parseUrl = utils.parseUrl;\nvar isString = utils.isString;\nvar fill = utils.fill;\n\nvar wrapConsoleMethod = require('./console').wrapMethod;\n\nvar dsnKeys = 'source protocol user pass host port path'.split(' '),\n    dsnPattern = /^(?:(\\w+):)?\\/\\/(?:(\\w+)(:\\w+)?@)?([\\w\\.-]+)(?::(\\d+))?(\\/.*)/;\n\nfunction now() {\n    return +new Date();\n}\n\n\n// First, check for JSON support\n// If there is no JSON, we no-op the core features of Raven\n// since JSON is required to encode the payload\nfunction Raven() {\n    this._hasJSON = !!(typeof JSON === 'object' && JSON.stringify);\n    // Raven can run in contexts where there's no document (react-native)\n    this._hasDocument = typeof document !== 'undefined';\n    this._lastCapturedException = null;\n    this._lastEventId = null;\n    this._globalServer = null;\n    this._globalKey = null;\n    this._globalProject = null;\n    this._globalContext = {};\n    this._globalOptions = {\n        logger: 'javascript',\n        ignoreErrors: [],\n        ignoreUrls: [],\n        whitelistUrls: [],\n        includePaths: [],\n        crossOrigin: 'anonymous',\n        collectWindowErrors: true,\n        maxMessageLength: 0,\n        stackTraceLimit: 50,\n        autoBreadcrumbs: true\n    };\n    this._ignoreOnError = 0;\n    this._isRavenInstalled = false;\n    this._originalErrorStackTraceLimit = Error.stackTraceLimit;\n    // capture references to window.console *and* all its methods first\n    // before the console plugin has a chance to monkey patch\n    this._originalConsole = window.console || {};\n    this._originalConsoleMethods = {};\n    this._plugins = [];\n    this._startTime = now();\n    this._wrappedBuiltIns = [];\n    this._breadcrumbs = [];\n    this._lastCapturedEvent = null;\n    this._keypressTimeout;\n    this._location = window.location;\n    this._lastHref = this._location && this._location.href;\n\n    for (var method in this._originalConsole) {  // eslint-disable-line guard-for-in\n      this._originalConsoleMethods[method] = this._originalConsole[method];\n    }\n}\n\n/*\n * The core Raven singleton\n *\n * @this {Raven}\n */\n\nRaven.prototype = {\n    // Hardcode version string so that raven source can be loaded directly via\n    // webpack (using a build step causes webpack #1617). Grunt verifies that\n    // this value matches package.json during build.\n    //   See: https://github.com/getsentry/raven-js/issues/465\n    VERSION: '3.7.0',\n\n    debug: false,\n\n    TraceKit: TraceKit, // alias to TraceKit\n\n    /*\n     * Configure Raven with a DSN and extra options\n     *\n     * @param {string} dsn The public Sentry DSN\n     * @param {object} options Optional set of of global options [optional]\n     * @return {Raven}\n     */\n    config: function(dsn, options) {\n        var self = this;\n\n        if (this._globalServer) {\n                this._logDebug('error', 'Error: Raven has already been configured');\n            return this;\n        }\n        if (!dsn) return this;\n\n        // merge in options\n        if (options) {\n            each(options, function(key, value){\n                // tags and extra are special and need to be put into context\n                if (key === 'tags' || key === 'extra') {\n                    self._globalContext[key] = value;\n                } else {\n                    self._globalOptions[key] = value;\n                }\n            });\n        }\n\n        this.setDSN(dsn);\n\n        // \"Script error.\" is hard coded into browsers for errors that it can't read.\n        // this is the result of a script being pulled in from an external domain and CORS.\n        this._globalOptions.ignoreErrors.push(/^Script error\\.?$/);\n        this._globalOptions.ignoreErrors.push(/^Javascript error: Script error\\.? on line 0$/);\n\n        // join regexp rules into one big rule\n        this._globalOptions.ignoreErrors = joinRegExp(this._globalOptions.ignoreErrors);\n        this._globalOptions.ignoreUrls = this._globalOptions.ignoreUrls.length ? joinRegExp(this._globalOptions.ignoreUrls) : false;\n        this._globalOptions.whitelistUrls = this._globalOptions.whitelistUrls.length ? joinRegExp(this._globalOptions.whitelistUrls) : false;\n        this._globalOptions.includePaths = joinRegExp(this._globalOptions.includePaths);\n        this._globalOptions.maxBreadcrumbs = Math.max(0, Math.min(this._globalOptions.maxBreadcrumbs || 100, 100)); // default and hard limit is 100\n\n        var autoBreadcrumbDefaults = {\n            xhr: true,\n            console: true,\n            dom: true,\n            location: true\n        };\n\n        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n        if ({}.toString.call(autoBreadcrumbs) === '[object Object]') {\n            autoBreadcrumbs = objectMerge(autoBreadcrumbDefaults, autoBreadcrumbs);\n        } else if (autoBreadcrumbs !== false) {\n            autoBreadcrumbs = autoBreadcrumbDefaults;\n        }\n        this._globalOptions.autoBreadcrumbs = autoBreadcrumbs;\n\n        TraceKit.collectWindowErrors = !!this._globalOptions.collectWindowErrors;\n\n        // return for chaining\n        return this;\n    },\n\n    /*\n     * Installs a global window.onerror error handler\n     * to capture and report uncaught exceptions.\n     * At this point, install() is required to be called due\n     * to the way TraceKit is set up.\n     *\n     * @return {Raven}\n     */\n    install: function() {\n        var self = this;\n        if (this.isSetup() && !this._isRavenInstalled) {\n            TraceKit.report.subscribe(function () {\n                self._handleOnErrorStackInfo.apply(self, arguments);\n            });\n            this._instrumentTryCatch();\n            if (self._globalOptions.autoBreadcrumbs)\n                this._instrumentBreadcrumbs();\n\n            // Install all of the plugins\n            this._drainPlugins();\n\n            this._isRavenInstalled = true;\n        }\n\n        Error.stackTraceLimit = this._globalOptions.stackTraceLimit;\n        return this;\n    },\n\n    /*\n     * Set the DSN (can be called multiple time unlike config)\n     *\n     * @param {string} dsn The public Sentry DSN\n     */\n    setDSN: function(dsn) {\n        var uri = this._parseDSN(dsn),\n          lastSlash = uri.path.lastIndexOf('/'),\n          path = uri.path.substr(1, lastSlash);\n\n        this._dsn = dsn;\n        this._globalKey = uri.user;\n        this._globalSecret = uri.pass && uri.pass.substr(1);\n        this._globalProject = uri.path.substr(lastSlash + 1);\n\n        this._globalServer = this._getGlobalServer(uri);\n\n        this._globalEndpoint = this._globalServer +\n            '/' + path + 'api/' + this._globalProject + '/store/';\n    },\n\n    /*\n     * Wrap code within a context so Raven can capture errors\n     * reliably across domains that is executed immediately.\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The callback to be immediately executed within the context\n     * @param {array} args An array of arguments to be called with the callback [optional]\n     */\n    context: function(options, func, args) {\n        if (isFunction(options)) {\n            args = func || [];\n            func = options;\n            options = undefined;\n        }\n\n        return this.wrap(options, func).apply(this, args);\n    },\n\n    /*\n     * Wrap code within a context and returns back a new function to be executed\n     *\n     * @param {object} options A specific set of options for this context [optional]\n     * @param {function} func The function to be wrapped in a new context\n     * @param {function} func A function to call before the try/catch wrapper [optional, private]\n     * @return {function} The newly wrapped functions with a context\n     */\n    wrap: function(options, func, _before) {\n        var self = this;\n        // 1 argument has been passed, and it's not a function\n        // so just return it\n        if (isUndefined(func) && !isFunction(options)) {\n            return options;\n        }\n\n        // options is optional\n        if (isFunction(options)) {\n            func = options;\n            options = undefined;\n        }\n\n        // At this point, we've passed along 2 arguments, and the second one\n        // is not a function either, so we'll just return the second argument.\n        if (!isFunction(func)) {\n            return func;\n        }\n\n        // We don't wanna wrap it twice!\n        try {\n            if (func.__raven__) {\n                return func;\n            }\n\n            // If this has already been wrapped in the past, return that\n            if (func.__raven_wrapper__ ){\n                return func.__raven_wrapper__ ;\n            }\n        } catch (e) {\n            // Just accessing custom props in some Selenium environments\n            // can cause a \"Permission denied\" exception (see raven-js#495).\n            // Bail on wrapping and return the function as-is (defers to window.onerror).\n            return func;\n        }\n\n        function wrapped() {\n            var args = [], i = arguments.length,\n                deep = !options || options && options.deep !== false;\n\n            if (_before && isFunction(_before)) {\n                _before.apply(this, arguments);\n            }\n\n            // Recursively wrap all of a function's arguments that are\n            // functions themselves.\n            while(i--) args[i] = deep ? self.wrap(options, arguments[i]) : arguments[i];\n\n            try {\n                return func.apply(this, args);\n            } catch(e) {\n                self._ignoreNextOnError();\n                self.captureException(e, options);\n                throw e;\n            }\n        }\n\n        // copy over properties of the old function\n        for (var property in func) {\n            if (hasKey(func, property)) {\n                wrapped[property] = func[property];\n            }\n        }\n        wrapped.prototype = func.prototype;\n\n        func.__raven_wrapper__ = wrapped;\n        // Signal that this function has been wrapped already\n        // for both debugging and to prevent it to being wrapped twice\n        wrapped.__raven__ = true;\n        wrapped.__inner__ = func;\n\n        return wrapped;\n    },\n\n    /*\n     * Uninstalls the global error handler.\n     *\n     * @return {Raven}\n     */\n    uninstall: function() {\n        TraceKit.report.uninstall();\n\n        this._restoreBuiltIns();\n\n        Error.stackTraceLimit = this._originalErrorStackTraceLimit;\n        this._isRavenInstalled = false;\n\n        return this;\n    },\n\n    /*\n     * Manually capture an exception and send it over to Sentry\n     *\n     * @param {error} ex An exception to be logged\n     * @param {object} options A specific set of options for this error [optional]\n     * @return {Raven}\n     */\n    captureException: function(ex, options) {\n        // If not an Error is passed through, recall as a message instead\n        if (!isError(ex)) {\n            return this.captureMessage(ex, objectMerge({\n                trimHeadFrames: 1,\n                stacktrace: true // if we fall back to captureMessage, default to attempting a new trace\n            }, options));\n        }\n\n        // Store the raw exception object for potential debugging and introspection\n        this._lastCapturedException = ex;\n\n        // TraceKit.report will re-raise any exception passed to it,\n        // which means you have to wrap it in try/catch. Instead, we\n        // can wrap it here and only re-raise if TraceKit.report\n        // raises an exception different from the one we asked to\n        // report on.\n        try {\n            var stack = TraceKit.computeStackTrace(ex);\n            this._handleStackInfo(stack, options);\n        } catch(ex1) {\n            if(ex !== ex1) {\n                throw ex1;\n            }\n        }\n\n        return this;\n    },\n\n    /*\n     * Manually send a message to Sentry\n     *\n     * @param {string} msg A plain message to be captured in Sentry\n     * @param {object} options A specific set of options for this message [optional]\n     * @return {Raven}\n     */\n    captureMessage: function(msg, options) {\n        // config() automagically converts ignoreErrors from a list to a RegExp so we need to test for an\n        // early call; we'll error on the side of logging anything called before configuration since it's\n        // probably something you should see:\n        if (!!this._globalOptions.ignoreErrors.test && this._globalOptions.ignoreErrors.test(msg)) {\n            return;\n        }\n\n        var data = objectMerge({\n            message: msg + ''  // Make sure it's actually a string\n        }, options);\n\n        if (options && options.stacktrace) {\n            var ex;\n            // create a stack trace from this point; just trim\n            // off extra frames so they don't include this function call (or\n            // earlier Raven.js library fn calls)\n            try {\n                throw new Error(msg);\n            } catch (ex1) {\n                ex = ex1;\n            }\n\n            // null exception name so `Error` isn't prefixed to msg\n            ex.name = null;\n\n            options = objectMerge({\n                // fingerprint on msg, not stack trace (legacy behavior, could be\n                // revisited)\n                fingerprint: msg,\n                trimHeadFrames: (options.trimHeadFrames || 0) + 1\n            }, options);\n\n            var stack = TraceKit.computeStackTrace(ex);\n            var frames = this._prepareFrames(stack, options);\n            data.stacktrace = {\n                // Sentry expects frames oldest to newest\n                frames: frames.reverse()\n            }\n        }\n\n        // Fire away!\n        this._send(data);\n\n        return this;\n    },\n\n    captureBreadcrumb: function (obj) {\n        var crumb = objectMerge({\n            timestamp: now() / 1000\n        }, obj);\n\n        this._breadcrumbs.push(crumb);\n        if (this._breadcrumbs.length > this._globalOptions.maxBreadcrumbs) {\n            this._breadcrumbs.shift();\n        }\n        return this;\n    },\n\n    addPlugin: function(plugin /*arg1, arg2, ... argN*/) {\n        var pluginArgs = Array.prototype.slice.call(arguments, 1);\n\n        this._plugins.push([plugin, pluginArgs]);\n        if (this._isRavenInstalled) {\n            this._drainPlugins();\n        }\n\n        return this;\n    },\n\n    /*\n     * Set/clear a user to be sent along with the payload.\n     *\n     * @param {object} user An object representing user data [optional]\n     * @return {Raven}\n     */\n    setUserContext: function(user) {\n        // Intentionally do not merge here since that's an unexpected behavior.\n        this._globalContext.user = user;\n\n        return this;\n    },\n\n    /*\n     * Merge extra attributes to be sent along with the payload.\n     *\n     * @param {object} extra An object representing extra data [optional]\n     * @return {Raven}\n     */\n    setExtraContext: function(extra) {\n        this._mergeContext('extra', extra);\n\n        return this;\n    },\n\n    /*\n     * Merge tags to be sent along with the payload.\n     *\n     * @param {object} tags An object representing tags [optional]\n     * @return {Raven}\n     */\n    setTagsContext: function(tags) {\n        this._mergeContext('tags', tags);\n\n        return this;\n    },\n\n    /*\n     * Clear all of the context.\n     *\n     * @return {Raven}\n     */\n    clearContext: function() {\n        this._globalContext = {};\n\n        return this;\n    },\n\n    /*\n     * Get a copy of the current context. This cannot be mutated.\n     *\n     * @return {object} copy of context\n     */\n    getContext: function() {\n        // lol javascript\n        return JSON.parse(stringify(this._globalContext));\n    },\n\n\n    /*\n     * Set environment of application\n     *\n     * @param {string} environment Typically something like 'production'.\n     * @return {Raven}\n     */\n    setEnvironment: function(environment) {\n        this._globalOptions.environment = environment;\n\n        return this;\n    },\n\n    /*\n     * Set release version of application\n     *\n     * @param {string} release Typically something like a git SHA to identify version\n     * @return {Raven}\n     */\n    setRelease: function(release) {\n        this._globalOptions.release = release;\n\n        return this;\n    },\n\n    /*\n     * Set the dataCallback option\n     *\n     * @param {function} callback The callback to run which allows the\n     *                            data blob to be mutated before sending\n     * @return {Raven}\n     */\n    setDataCallback: function(callback) {\n        var original = this._globalOptions.dataCallback;\n        this._globalOptions.dataCallback = isFunction(callback)\n          ? function (data) { return callback(data, original); }\n          : callback;\n\n        return this;\n    },\n\n    /*\n     * Set the shouldSendCallback option\n     *\n     * @param {function} callback The callback to run which allows\n     *                            introspecting the blob before sending\n     * @return {Raven}\n     */\n    setShouldSendCallback: function(callback) {\n        var original = this._globalOptions.shouldSendCallback;\n        this._globalOptions.shouldSendCallback = isFunction(callback)\n            ? function (data) { return callback(data, original); }\n            : callback;\n\n        return this;\n    },\n\n    /**\n     * Override the default HTTP transport mechanism that transmits data\n     * to the Sentry server.\n     *\n     * @param {function} transport Function invoked instead of the default\n     *                             `makeRequest` handler.\n     *\n     * @return {Raven}\n     */\n    setTransport: function(transport) {\n        this._globalOptions.transport = transport;\n\n        return this;\n    },\n\n    /*\n     * Get the latest raw exception that was captured by Raven.\n     *\n     * @return {error}\n     */\n    lastException: function() {\n        return this._lastCapturedException;\n    },\n\n    /*\n     * Get the last event id\n     *\n     * @return {string}\n     */\n    lastEventId: function() {\n        return this._lastEventId;\n    },\n\n    /*\n     * Determine if Raven is setup and ready to go.\n     *\n     * @return {boolean}\n     */\n    isSetup: function() {\n        if (!this._hasJSON) return false;  // needs JSON support\n        if (!this._globalServer) {\n            if (!this.ravenNotConfiguredError) {\n              this.ravenNotConfiguredError = true;\n              this._logDebug('error', 'Error: Raven has not been configured.');\n            }\n            return false;\n        }\n        return true;\n    },\n\n    afterLoad: function () {\n        // TODO: remove window dependence?\n\n        // Attempt to initialize Raven on load\n        var RavenConfig = window.RavenConfig;\n        if (RavenConfig) {\n            this.config(RavenConfig.dsn, RavenConfig.config).install();\n        }\n    },\n\n    showReportDialog: function (options) {\n        if (!window.document) // doesn't work without a document (React native)\n            return;\n\n        options = options || {};\n\n        var lastEventId = options.eventId || this.lastEventId();\n        if (!lastEventId) {\n            throw new RavenConfigError('Missing eventId');\n        }\n\n        var dsn = options.dsn || this._dsn;\n        if (!dsn) {\n            throw new RavenConfigError('Missing DSN');\n        }\n\n        var encode = encodeURIComponent;\n        var qs = '';\n        qs += '?eventId=' + encode(lastEventId);\n        qs += '&dsn=' + encode(dsn);\n\n        var user = options.user || this._globalContext.user;\n        if (user) {\n            if (user.name)  qs += '&name=' + encode(user.name);\n            if (user.email) qs += '&email=' + encode(user.email);\n        }\n\n        var globalServer = this._getGlobalServer(this._parseDSN(dsn));\n\n        var script = document.createElement('script');\n        script.async = true;\n        script.src = globalServer + '/api/embed/error-page/' + qs;\n        (document.head || document.body).appendChild(script);\n    },\n\n    /**** Private functions ****/\n    _ignoreNextOnError: function () {\n        var self = this;\n        this._ignoreOnError += 1;\n        setTimeout(function () {\n            // onerror should trigger before setTimeout\n            self._ignoreOnError -= 1;\n        });\n    },\n\n    _triggerEvent: function(eventType, options) {\n        // NOTE: `event` is a native browser thing, so let's avoid conflicting wiht it\n        var evt, key;\n\n        if (!this._hasDocument)\n            return;\n\n        options = options || {};\n\n        eventType = 'raven' + eventType.substr(0,1).toUpperCase() + eventType.substr(1);\n\n        if (document.createEvent) {\n            evt = document.createEvent('HTMLEvents');\n            evt.initEvent(eventType, true, true);\n        } else {\n            evt = document.createEventObject();\n            evt.eventType = eventType;\n        }\n\n        for (key in options) if (hasKey(options, key)) {\n            evt[key] = options[key];\n        }\n\n        if (document.createEvent) {\n            // IE9 if standards\n            document.dispatchEvent(evt);\n        } else {\n            // IE8 regardless of Quirks or Standards\n            // IE9 if quirks\n            try {\n                document.fireEvent('on' + evt.eventType.toLowerCase(), evt);\n            } catch(e) {\n                // Do nothing\n            }\n        }\n    },\n\n    /**\n     * Wraps addEventListener to capture UI breadcrumbs\n     * @param evtName the event name (e.g. \"click\")\n     * @returns {Function}\n     * @private\n     */\n    _breadcrumbEventHandler: function(evtName) {\n        var self = this;\n        return function (evt) {\n            // reset keypress timeout; e.g. triggering a 'click' after\n            // a 'keypress' will reset the keypress debounce so that a new\n            // set of keypresses can be recorded\n            self._keypressTimeout = null;\n\n            // It's possible this handler might trigger multiple times for the same\n            // event (e.g. event propagation through node ancestors). Ignore if we've\n            // already captured the event.\n            if (self._lastCapturedEvent === evt)\n                return;\n\n            self._lastCapturedEvent = evt;\n            var elem = evt.target;\n\n            var target;\n\n            // try/catch htmlTreeAsString because it's particularly complicated, and\n            // just accessing the DOM incorrectly can throw an exception in some circumstances.\n            try {\n                target = htmlTreeAsString(elem);\n            } catch (e) {\n                target = '<unknown>';\n            }\n\n            self.captureBreadcrumb({\n                category: 'ui.' + evtName, // e.g. ui.click, ui.input\n                message: target\n            });\n        };\n    },\n\n    /**\n     * Wraps addEventListener to capture keypress UI events\n     * @returns {Function}\n     * @private\n     */\n    _keypressEventHandler: function() {\n        var self = this,\n            debounceDuration = 1000; // milliseconds\n\n        // TODO: if somehow user switches keypress target before\n        //       debounce timeout is triggered, we will only capture\n        //       a single breadcrumb from the FIRST target (acceptable?)\n\n        return function (evt) {\n            var target = evt.target,\n                tagName = target && target.tagName;\n\n            // only consider keypress events on actual input elements\n            // this will disregard keypresses targeting body (e.g. tabbing\n            // through elements, hotkeys, etc)\n            if (!tagName || tagName !== 'INPUT' && tagName !== 'TEXTAREA')\n                return;\n\n            // record first keypress in a series, but ignore subsequent\n            // keypresses until debounce clears\n            var timeout = self._keypressTimeout;\n            if (!timeout) {\n                self._breadcrumbEventHandler('input')(evt);\n            }\n            clearTimeout(timeout);\n            self._keypressTimeout = setTimeout(function () {\n               self._keypressTimeout = null;\n            }, debounceDuration);\n        };\n    },\n\n    /**\n     * Captures a breadcrumb of type \"navigation\", normalizing input URLs\n     * @param to the originating URL\n     * @param from the target URL\n     * @private\n     */\n    _captureUrlChange: function(from, to) {\n        var parsedLoc = parseUrl(this._location.href);\n        var parsedTo = parseUrl(to);\n        var parsedFrom = parseUrl(from);\n\n        // because onpopstate only tells you the \"new\" (to) value of location.href, and\n        // not the previous (from) value, we need to track the value of the current URL\n        // state ourselves\n        this._lastHref = to;\n\n        // Use only the path component of the URL if the URL matches the current\n        // document (almost all the time when using pushState)\n        if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host)\n            to = parsedTo.relative;\n        if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host)\n            from = parsedFrom.relative;\n\n        this.captureBreadcrumb({\n            category: 'navigation',\n            data: {\n                to: to,\n                from: from\n            }\n        });\n    },\n\n    /**\n     * Install any queued plugins\n     */\n    _instrumentTryCatch: function() {\n        var self = this;\n\n        var wrappedBuiltIns = self._wrappedBuiltIns;\n\n        function wrapTimeFn(orig) {\n            return function (fn, t) { // preserve arity\n                // Make a copy of the arguments to prevent deoptimization\n                // https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#32-leaking-arguments\n                var args = new Array(arguments.length);\n                for(var i = 0; i < args.length; ++i) {\n                    args[i] = arguments[i];\n                }\n                var originalCallback = args[0];\n                if (isFunction(originalCallback)) {\n                    args[0] = self.wrap(originalCallback);\n                }\n\n                // IE < 9 doesn't support .call/.apply on setInterval/setTimeout, but it\n                // also supports only two arguments and doesn't care what this is, so we\n                // can just call the original function directly.\n                if (orig.apply) {\n                    return orig.apply(this, args);\n                } else {\n                    return orig(args[0], args[1]);\n                }\n            };\n        }\n\n        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\n        function wrapEventTarget(global) {\n            var proto = window[global] && window[global].prototype;\n            if (proto && proto.hasOwnProperty && proto.hasOwnProperty('addEventListener')) {\n                fill(proto, 'addEventListener', function(orig) {\n                    return function (evtName, fn, capture, secure) { // preserve arity\n                        try {\n                            if (fn && fn.handleEvent) {\n                                fn.handleEvent = self.wrap(fn.handleEvent);\n                            }\n                        } catch (err) {\n                            // can sometimes get 'Permission denied to access property \"handle Event'\n                        }\n\n                        // More breadcrumb DOM capture ... done here and not in `_instrumentBreadcrumbs`\n                        // so that we don't have more than one wrapper function\n                        var before;\n                        if (autoBreadcrumbs && autoBreadcrumbs.dom && (global === 'EventTarget' || global === 'Node')) {\n                            if (evtName === 'click'){\n                                before = self._breadcrumbEventHandler(evtName);\n                            } else if (evtName === 'keypress') {\n                                before = self._keypressEventHandler();\n                            }\n                        }\n                        return orig.call(this, evtName, self.wrap(fn, undefined, before), capture, secure);\n                    };\n                }, wrappedBuiltIns);\n                fill(proto, 'removeEventListener', function (orig) {\n                    return function (evt, fn, capture, secure) {\n                        try {\n                            fn = fn && (fn.__raven_wrapper__ ? fn.__raven_wrapper__  : fn);\n                        } catch (e) {\n                            // ignore, accessing __raven_wrapper__ will throw in some Selenium environments\n                        }\n                        return orig.call(this, evt, fn, capture, secure);\n                    };\n                }, wrappedBuiltIns);\n            }\n        }\n\n        fill(window, 'setTimeout', wrapTimeFn, wrappedBuiltIns);\n        fill(window, 'setInterval', wrapTimeFn, wrappedBuiltIns);\n        if (window.requestAnimationFrame) {\n            fill(window, 'requestAnimationFrame', function (orig) {\n                return function (cb) {\n                    return orig(self.wrap(cb));\n                };\n            }, wrappedBuiltIns);\n        }\n\n        // event targets borrowed from bugsnag-js:\n        // https://github.com/bugsnag/bugsnag-js/blob/master/src/bugsnag.js#L666\n        var eventTargets = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];\n        for (var i = 0; i < eventTargets.length; i++) {\n            wrapEventTarget(eventTargets[i]);\n        }\n\n        var $ = window.jQuery || window.$;\n        if ($ && $.fn && $.fn.ready) {\n            fill($.fn, 'ready', function (orig) {\n                return function (fn) {\n                    return orig.call(this, self.wrap(fn));\n                };\n            }, wrappedBuiltIns);\n        }\n    },\n\n\n    /**\n     * Instrument browser built-ins w/ breadcrumb capturing\n     *  - XMLHttpRequests\n     *  - DOM interactions (click/typing)\n     *  - window.location changes\n     *  - console\n     *\n     * Can be disabled or individually configured via the `autoBreadcrumbs` config option\n     */\n    _instrumentBreadcrumbs: function () {\n        var self = this;\n        var autoBreadcrumbs = this._globalOptions.autoBreadcrumbs;\n\n        var wrappedBuiltIns = self._wrappedBuiltIns;\n\n        function wrapProp(prop, xhr) {\n            if (prop in xhr && isFunction(xhr[prop])) {\n                fill(xhr, prop, function (orig) {\n                    return self.wrap(orig);\n                }); // intentionally don't track filled methods on XHR instances\n            }\n        }\n\n        if (autoBreadcrumbs.xhr && 'XMLHttpRequest' in window) {\n            var xhrproto = XMLHttpRequest.prototype;\n            fill(xhrproto, 'open', function(origOpen) {\n                return function (method, url) { // preserve arity\n\n                    // if Sentry key appears in URL, don't capture\n                    if (isString(url) && url.indexOf(self._globalKey) === -1) {\n                        this.__raven_xhr = {\n                            method: method,\n                            url: url,\n                            status_code: null\n                        };\n                    }\n\n                    return origOpen.apply(this, arguments);\n                };\n            }, wrappedBuiltIns);\n\n            fill(xhrproto, 'send', function(origSend) {\n                return function (data) { // preserve arity\n                    var xhr = this;\n\n                    function onreadystatechangeHandler() {\n                        if (xhr.__raven_xhr && (xhr.readyState === 1 || xhr.readyState === 4)) {\n                            try {\n                                // touching statusCode in some platforms throws\n                                // an exception\n                                xhr.__raven_xhr.status_code = xhr.status;\n                            } catch (e) { /* do nothing */ }\n                            self.captureBreadcrumb({\n                                type: 'http',\n                                category: 'xhr',\n                                data: xhr.__raven_xhr\n                            });\n                        }\n                    }\n\n                    var props = ['onload', 'onerror', 'onprogress'];\n                    for (var j = 0; j < props.length; j++) {\n                        wrapProp(props[j], xhr);\n                    }\n\n                    if ('onreadystatechange' in xhr && isFunction(xhr.onreadystatechange)) {\n                        fill(xhr, 'onreadystatechange', function (orig) {\n                            return self.wrap(orig, undefined, onreadystatechangeHandler);\n                        } /* intentionally don't track this instrumentation */);\n                    } else {\n                        // if onreadystatechange wasn't actually set by the page on this xhr, we\n                        // are free to set our own and capture the breadcrumb\n                        xhr.onreadystatechange = onreadystatechangeHandler;\n                    }\n\n                    return origSend.apply(this, arguments);\n                };\n            }, wrappedBuiltIns);\n        }\n\n        // Capture breadcrumbs from any click that is unhandled / bubbled up all the way\n        // to the document. Do this before we instrument addEventListener.\n        if (autoBreadcrumbs.dom && this._hasDocument) {\n            if (document.addEventListener) {\n                document.addEventListener('click', self._breadcrumbEventHandler('click'), false);\n                document.addEventListener('keypress', self._keypressEventHandler(), false);\n            }\n            else {\n                // IE8 Compatibility\n                document.attachEvent('onclick', self._breadcrumbEventHandler('click'));\n                document.attachEvent('onkeypress', self._keypressEventHandler());\n            }\n        }\n\n        // record navigation (URL) changes\n        // NOTE: in Chrome App environment, touching history.pushState, *even inside\n        //       a try/catch block*, will cause Chrome to output an error to console.error\n        // borrowed from: https://github.com/angular/angular.js/pull/13945/files\n        var chrome = window.chrome;\n        var isChromePackagedApp = chrome && chrome.app && chrome.app.runtime;\n        var hasPushState = !isChromePackagedApp && window.history && history.pushState;\n        if (autoBreadcrumbs.location && hasPushState) {\n            // TODO: remove onpopstate handler on uninstall()\n            var oldOnPopState = window.onpopstate;\n            window.onpopstate = function () {\n                var currentHref = self._location.href;\n                self._captureUrlChange(self._lastHref, currentHref);\n\n                if (oldOnPopState) {\n                    return oldOnPopState.apply(this, arguments);\n                }\n            };\n\n            fill(history, 'pushState', function (origPushState) {\n                // note history.pushState.length is 0; intentionally not declaring\n                // params to preserve 0 arity\n                return function (/* state, title, url */) {\n                    var url = arguments.length > 2 ? arguments[2] : undefined;\n\n                    // url argument is optional\n                    if (url) {\n                        // coerce to string (this is what pushState does)\n                        self._captureUrlChange(self._lastHref, url + '');\n                    }\n\n                    return origPushState.apply(this, arguments);\n                };\n            }, wrappedBuiltIns);\n        }\n\n        if (autoBreadcrumbs.console && 'console' in window && console.log) {\n            // console\n            var consoleMethodCallback = function (msg, data) {\n                self.captureBreadcrumb({\n                    message: msg,\n                    level: data.level,\n                    category: 'console'\n                });\n            };\n\n            each(['debug', 'info', 'warn', 'error', 'log'], function (_, level) {\n                wrapConsoleMethod(console, level, consoleMethodCallback);\n            });\n        }\n\n    },\n\n    _restoreBuiltIns: function () {\n        // restore any wrapped builtins\n        var builtin;\n        while (this._wrappedBuiltIns.length) {\n            builtin = this._wrappedBuiltIns.shift();\n\n            var obj = builtin[0],\n              name = builtin[1],\n              orig = builtin[2];\n\n            obj[name] = orig;\n        }\n    },\n\n    _drainPlugins: function() {\n        var self = this;\n\n        // FIX ME TODO\n        each(this._plugins, function(_, plugin) {\n            var installer = plugin[0];\n            var args = plugin[1];\n            installer.apply(self, [self].concat(args));\n        });\n    },\n\n    _parseDSN: function(str) {\n        var m = dsnPattern.exec(str),\n            dsn = {},\n            i = 7;\n\n        try {\n            while (i--) dsn[dsnKeys[i]] = m[i] || '';\n        } catch(e) {\n            throw new RavenConfigError('Invalid DSN: ' + str);\n        }\n\n        if (dsn.pass && !this._globalOptions.allowSecretKey) {\n            throw new RavenConfigError('Do not specify your secret key in the DSN. See: http://bit.ly/raven-secret-key');\n        }\n\n        return dsn;\n    },\n\n    _getGlobalServer: function(uri) {\n        // assemble the endpoint from the uri pieces\n        var globalServer = '//' + uri.host +\n            (uri.port ? ':' + uri.port : '');\n\n        if (uri.protocol) {\n            globalServer = uri.protocol + ':' + globalServer;\n        }\n        return globalServer;\n    },\n\n    _handleOnErrorStackInfo: function() {\n        // if we are intentionally ignoring errors via onerror, bail out\n        if (!this._ignoreOnError) {\n            this._handleStackInfo.apply(this, arguments);\n        }\n    },\n\n    _handleStackInfo: function(stackInfo, options) {\n        var frames = this._prepareFrames(stackInfo, options);\n\n        this._triggerEvent('handle', {\n            stackInfo: stackInfo,\n            options: options\n        });\n\n        this._processException(\n            stackInfo.name,\n            stackInfo.message,\n            stackInfo.url,\n            stackInfo.lineno,\n            frames,\n            options\n        );\n    },\n\n    _prepareFrames: function(stackInfo, options) {\n        var self = this;\n        var frames = [];\n        if (stackInfo.stack && stackInfo.stack.length) {\n            each(stackInfo.stack, function(i, stack) {\n                var frame = self._normalizeFrame(stack);\n                if (frame) {\n                    frames.push(frame);\n                }\n            });\n\n            // e.g. frames captured via captureMessage throw\n            if (options && options.trimHeadFrames) {\n                for (var j = 0; j < options.trimHeadFrames && j < frames.length; j++) {\n                    frames[j].in_app = false;\n                }\n            }\n        }\n        frames = frames.slice(0, this._globalOptions.stackTraceLimit);\n        return frames;\n    },\n\n\n    _normalizeFrame: function(frame) {\n        if (!frame.url) return;\n\n        // normalize the frames data\n        var normalized = {\n            filename:   frame.url,\n            lineno:     frame.line,\n            colno:      frame.column,\n            'function': frame.func || '?'\n        };\n\n        normalized.in_app = !( // determine if an exception came from outside of our app\n            // first we check the global includePaths list.\n            !!this._globalOptions.includePaths.test && !this._globalOptions.includePaths.test(normalized.filename) ||\n            // Now we check for fun, if the function name is Raven or TraceKit\n            /(Raven|TraceKit)\\./.test(normalized['function']) ||\n            // finally, we do a last ditch effort and check for raven.min.js\n            /raven\\.(min\\.)?js$/.test(normalized.filename)\n        );\n\n        return normalized;\n    },\n\n    _processException: function(type, message, fileurl, lineno, frames, options) {\n        var stacktrace;\n        if (!!this._globalOptions.ignoreErrors.test && this._globalOptions.ignoreErrors.test(message)) return;\n\n        message += '';\n\n        if (frames && frames.length) {\n            fileurl = frames[0].filename || fileurl;\n            // Sentry expects frames oldest to newest\n            // and JS sends them as newest to oldest\n            frames.reverse();\n            stacktrace = {frames: frames};\n        } else if (fileurl) {\n            stacktrace = {\n                frames: [{\n                    filename: fileurl,\n                    lineno: lineno,\n                    in_app: true\n                }]\n            };\n        }\n\n        if (!!this._globalOptions.ignoreUrls.test && this._globalOptions.ignoreUrls.test(fileurl)) return;\n        if (!!this._globalOptions.whitelistUrls.test && !this._globalOptions.whitelistUrls.test(fileurl)) return;\n\n        var data = objectMerge({\n            // sentry.interfaces.Exception\n            exception: {\n                values: [{\n                    type: type,\n                    value: message,\n                    stacktrace: stacktrace\n                }]\n            },\n            culprit: fileurl\n        }, options);\n\n        // Fire away!\n        this._send(data);\n    },\n\n    _trimPacket: function(data) {\n        // For now, we only want to truncate the two different messages\n        // but this could/should be expanded to just trim everything\n        var max = this._globalOptions.maxMessageLength;\n        if (data.message) {\n            data.message = truncate(data.message, max);\n        }\n        if (data.exception) {\n            var exception = data.exception.values[0];\n            exception.value = truncate(exception.value, max);\n        }\n\n        return data;\n    },\n\n    _getHttpData: function() {\n        if (!this._hasDocument || !document.location || !document.location.href) {\n            return;\n        }\n\n        var httpData = {\n            headers: {\n                'User-Agent': navigator.userAgent\n            }\n        };\n\n        httpData.url = document.location.href;\n\n        if (document.referrer) {\n            httpData.headers.Referer = document.referrer;\n        }\n\n        return httpData;\n    },\n\n\n    _send: function(data) {\n        var globalOptions = this._globalOptions;\n\n        var baseData = {\n            project: this._globalProject,\n            logger: globalOptions.logger,\n            platform: 'javascript'\n        }, httpData = this._getHttpData();\n\n        if (httpData) {\n            baseData.request = httpData;\n        }\n\n        // HACK: delete `trimHeadFrames` to prevent from appearing in outbound payload\n        if (data.trimHeadFrames) delete data.trimHeadFrames;\n\n        data = objectMerge(baseData, data);\n\n        // Merge in the tags and extra separately since objectMerge doesn't handle a deep merge\n        data.tags = objectMerge(objectMerge({}, this._globalContext.tags), data.tags);\n        data.extra = objectMerge(objectMerge({}, this._globalContext.extra), data.extra);\n\n        // Send along our own collected metadata with extra\n        data.extra['session:duration'] = now() - this._startTime;\n\n        if (this._breadcrumbs && this._breadcrumbs.length > 0) {\n            // intentionally make shallow copy so that additions\n            // to breadcrumbs aren't accidentally sent in this request\n            data.breadcrumbs = {\n                values: [].slice.call(this._breadcrumbs, 0)\n            };\n        }\n\n        // If there are no tags/extra, strip the key from the payload alltogther.\n        if (isEmptyObject(data.tags)) delete data.tags;\n\n        if (this._globalContext.user) {\n            // sentry.interfaces.User\n            data.user = this._globalContext.user;\n        }\n\n        // Include the environment if it's defined in globalOptions\n        if (globalOptions.environment) data.environment = globalOptions.environment;\n\n        // Include the release if it's defined in globalOptions\n        if (globalOptions.release) data.release = globalOptions.release;\n\n        // Include server_name if it's defined in globalOptions\n        if (globalOptions.serverName) data.server_name = globalOptions.serverName;\n\n        if (isFunction(globalOptions.dataCallback)) {\n            data = globalOptions.dataCallback(data) || data;\n        }\n\n        // Why??????????\n        if (!data || isEmptyObject(data)) {\n            return;\n        }\n\n        // Check if the request should be filtered or not\n        if (isFunction(globalOptions.shouldSendCallback) && !globalOptions.shouldSendCallback(data)) {\n            return;\n        }\n\n        this._sendProcessedPayload(data);\n    },\n\n    _sendProcessedPayload: function(data, callback) {\n        var self = this;\n        var globalOptions = this._globalOptions;\n\n        // Send along an event_id if not explicitly passed.\n        // This event_id can be used to reference the error within Sentry itself.\n        // Set lastEventId after we know the error should actually be sent\n        this._lastEventId = data.event_id || (data.event_id = uuid4());\n\n        // Try and clean up the packet before sending by truncating long values\n        data = this._trimPacket(data);\n\n        this._logDebug('debug', 'Raven about to send:', data);\n\n        if (!this.isSetup()) return;\n\n        var auth = {\n            sentry_version: '7',\n            sentry_client: 'raven-js/' + this.VERSION,\n            sentry_key: this._globalKey\n        };\n        if (this._globalSecret) {\n            auth.sentry_secret = this._globalSecret;\n        }\n\n        var exception = data.exception && data.exception.values[0];\n        this.captureBreadcrumb({\n            category: 'sentry',\n            message: exception\n                ? (exception.type ? exception.type + ': ' : '') + exception.value\n                : data.message,\n            event_id: data.event_id,\n            level: data.level || 'error' // presume error unless specified\n        });\n\n        var url = this._globalEndpoint;\n        (globalOptions.transport || this._makeRequest).call(this, {\n            url: url,\n            auth: auth,\n            data: data,\n            options: globalOptions,\n            onSuccess: function success() {\n                self._triggerEvent('success', {\n                    data: data,\n                    src: url\n                });\n                callback && callback();\n            },\n            onError: function failure(error) {\n                self._triggerEvent('failure', {\n                    data: data,\n                    src: url\n                });\n                error = error || new Error('Raven send failed (no additional details provided)');\n                callback && callback(error);\n            }\n        });\n    },\n\n    _makeRequest: function(opts) {\n        var request = new XMLHttpRequest();\n\n        // if browser doesn't support CORS (e.g. IE7), we are out of luck\n        var hasCORS =\n            'withCredentials' in request ||\n            typeof XDomainRequest !== 'undefined';\n\n        if (!hasCORS) return;\n\n        var url = opts.url;\n        function handler() {\n            if (request.status === 200) {\n                if (opts.onSuccess) {\n                    opts.onSuccess();\n                }\n            } else if (opts.onError) {\n                opts.onError(new Error('Sentry error code: ' + request.status));\n            }\n        }\n\n        if ('withCredentials' in request) {\n            request.onreadystatechange = function () {\n                if (request.readyState !== 4) {\n                    return;\n                }\n                handler();\n            };\n        } else {\n            request = new XDomainRequest();\n            // xdomainrequest cannot go http -> https (or vice versa),\n            // so always use protocol relative\n            url = url.replace(/^https?:/, '');\n\n            // onreadystatechange not supported by XDomainRequest\n            request.onload = handler;\n        }\n\n        // NOTE: auth is intentionally sent as part of query string (NOT as custom\n        //       HTTP header) so as to avoid preflight CORS requests\n        request.open('POST', url + '?' + urlencode(opts.auth));\n        request.send(stringify(opts.data));\n    },\n\n    _logDebug: function(level) {\n        if (this._originalConsoleMethods[level] && this.debug) {\n            // In IE<10 console methods do not have their own 'apply' method\n            Function.prototype.apply.call(\n                this._originalConsoleMethods[level],\n                this._originalConsole,\n                [].slice.call(arguments, 1)\n            );\n        }\n    },\n\n    _mergeContext: function(key, context) {\n        if (isUndefined(context)) {\n            delete this._globalContext[key];\n        } else {\n            this._globalContext[key] = objectMerge(this._globalContext[key] || {}, context);\n        }\n    }\n};\n\n// Deprecations\nRaven.prototype.setUser = Raven.prototype.setUserContext;\nRaven.prototype.setReleaseContext = Raven.prototype.setRelease;\n\nmodule.exports = Raven;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/raven-js/src/raven.js\n **/","/**\n * Enforces a single instance of the Raven client, and the\n * main entry point for Raven. If you are a consumer of the\n * Raven library, you SHOULD load this file (vs raven.js).\n **/\n\n'use strict';\n\nvar RavenConstructor = require('./raven');\n\nvar _Raven = window.Raven;\n\nvar Raven = new RavenConstructor();\n\n/*\n * Allow multiple versions of Raven to be installed.\n * Strip Raven from the global context and returns the instance.\n *\n * @return {Raven}\n */\nRaven.noConflict = function () {\n\twindow.Raven = _Raven;\n\treturn Raven;\n};\n\nRaven.afterLoad();\n\nmodule.exports = Raven;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/raven-js/src/singleton.js\n **/","'use strict';\n\nvar utils = require('../../src/utils');\n\nvar hasKey = utils.hasKey;\nvar isString = utils.isString;\nvar isUndefined = utils.isUndefined;\n\n/*\n TraceKit - Cross brower stack traces - github.com/occ/TraceKit\n MIT license\n*/\n\nvar TraceKit = {\n    collectWindowErrors: true,\n    debug: false\n};\n\n// global reference to slice\nvar _slice = [].slice;\nvar UNKNOWN_FUNCTION = '?';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\nvar ERROR_TYPES_RE = /^(?:Uncaught (?:exception: )?)?((?:Eval|Internal|Range|Reference|Syntax|Type|URI)Error): ?(.*)$/;\n\nfunction getLocationHref() {\n    if (typeof document === 'undefined')\n        return '';\n\n    return document.location.href;\n}\n\n/**\n * TraceKit.report: cross-browser processing of unhandled exceptions\n *\n * Syntax:\n *   TraceKit.report.subscribe(function(stackInfo) { ... })\n *   TraceKit.report.unsubscribe(function(stackInfo) { ... })\n *   TraceKit.report(exception)\n *   try { ...code... } catch(ex) { TraceKit.report(ex); }\n *\n * Supports:\n *   - Firefox: full stack trace with line numbers, plus column number\n *              on top frame; column number is not guaranteed\n *   - Opera:   full stack trace with line and column numbers\n *   - Chrome:  full stack trace with line and column numbers\n *   - Safari:  line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *   - IE:      line and column number for the top frame only; some frames\n *              may be missing, and column number is not guaranteed\n *\n * In theory, TraceKit should work on all of the following versions:\n *   - IE5.5+ (only 8.0 tested)\n *   - Firefox 0.9+ (only 3.5+ tested)\n *   - Opera 7+ (only 10.50 tested; versions 9 and earlier may require\n *     Exceptions Have Stacktrace to be enabled in opera:config)\n *   - Safari 3+ (only 4+ tested)\n *   - Chrome 1+ (only 5+ tested)\n *   - Konqueror 3.5+ (untested)\n *\n * Requires TraceKit.computeStackTrace.\n *\n * Tries to catch all unhandled exceptions and report them to the\n * subscribed handlers. Please note that TraceKit.report will rethrow the\n * exception. This is REQUIRED in order to get a useful stack trace in IE.\n * If the exception does not reach the top of the browser, you will only\n * get a stack trace from the point where TraceKit.report was called.\n *\n * Handlers receive a stackInfo object as described in the\n * TraceKit.computeStackTrace docs.\n */\nTraceKit.report = (function reportModuleWrapper() {\n    var handlers = [],\n        lastArgs = null,\n        lastException = null,\n        lastExceptionStack = null;\n\n    /**\n     * Add a crash handler.\n     * @param {Function} handler\n     */\n    function subscribe(handler) {\n        installGlobalHandler();\n        handlers.push(handler);\n    }\n\n    /**\n     * Remove a crash handler.\n     * @param {Function} handler\n     */\n    function unsubscribe(handler) {\n        for (var i = handlers.length - 1; i >= 0; --i) {\n            if (handlers[i] === handler) {\n                handlers.splice(i, 1);\n            }\n        }\n    }\n\n    /**\n     * Remove all crash handlers.\n     */\n    function unsubscribeAll() {\n        uninstallGlobalHandler();\n        handlers = [];\n    }\n\n    /**\n     * Dispatch stack information to all handlers.\n     * @param {Object.<string, *>} stack\n     */\n    function notifyHandlers(stack, isWindowError) {\n        var exception = null;\n        if (isWindowError && !TraceKit.collectWindowErrors) {\n          return;\n        }\n        for (var i in handlers) {\n            if (hasKey(handlers, i)) {\n                try {\n                    handlers[i].apply(null, [stack].concat(_slice.call(arguments, 2)));\n                } catch (inner) {\n                    exception = inner;\n                }\n            }\n        }\n\n        if (exception) {\n            throw exception;\n        }\n    }\n\n    var _oldOnerrorHandler, _onErrorHandlerInstalled;\n\n    /**\n     * Ensures all global unhandled exceptions are recorded.\n     * Supported by Gecko and IE.\n     * @param {string} message Error message.\n     * @param {string} url URL of script that generated the exception.\n     * @param {(number|string)} lineNo The line number at which the error\n     * occurred.\n     * @param {?(number|string)} colNo The column number at which the error\n     * occurred.\n     * @param {?Error} ex The actual Error object.\n     */\n    function traceKitWindowOnError(message, url, lineNo, colNo, ex) {\n        var stack = null;\n\n        if (lastExceptionStack) {\n            TraceKit.computeStackTrace.augmentStackTraceWithInitialElement(lastExceptionStack, url, lineNo, message);\n            processLastException();\n        } else if (ex) {\n            // New chrome and blink send along a real error object\n            // Let's just report that like a normal error.\n            // See: https://mikewest.org/2013/08/debugging-runtime-errors-with-window-onerror\n            stack = TraceKit.computeStackTrace(ex);\n            notifyHandlers(stack, true);\n        } else {\n            var location = {\n                'url': url,\n                'line': lineNo,\n                'column': colNo\n            };\n\n            var name = undefined;\n            var msg = message; // must be new var or will modify original `arguments`\n            var groups;\n            if (isString(message)) {\n                var groups = message.match(ERROR_TYPES_RE);\n                if (groups) {\n                    name = groups[1];\n                    msg = groups[2];\n                }\n            }\n\n            location.func = UNKNOWN_FUNCTION;\n\n            stack = {\n                'name': name,\n                'message': msg,\n                'url': getLocationHref(),\n                'stack': [location]\n            };\n            notifyHandlers(stack, true);\n        }\n\n        if (_oldOnerrorHandler) {\n            return _oldOnerrorHandler.apply(this, arguments);\n        }\n\n        return false;\n    }\n\n    function installGlobalHandler ()\n    {\n        if (_onErrorHandlerInstalled) {\n            return;\n        }\n        _oldOnerrorHandler = window.onerror;\n        window.onerror = traceKitWindowOnError;\n        _onErrorHandlerInstalled = true;\n    }\n\n    function uninstallGlobalHandler ()\n    {\n        if (!_onErrorHandlerInstalled) {\n            return;\n        }\n        window.onerror = _oldOnerrorHandler;\n        _onErrorHandlerInstalled = false;\n        _oldOnerrorHandler = undefined;\n    }\n\n    function processLastException() {\n        var _lastExceptionStack = lastExceptionStack,\n            _lastArgs = lastArgs;\n        lastArgs = null;\n        lastExceptionStack = null;\n        lastException = null;\n        notifyHandlers.apply(null, [_lastExceptionStack, false].concat(_lastArgs));\n    }\n\n    /**\n     * Reports an unhandled Error to TraceKit.\n     * @param {Error} ex\n     * @param {?boolean} rethrow If false, do not re-throw the exception.\n     * Only used for window.onerror to not cause an infinite loop of\n     * rethrowing.\n     */\n    function report(ex, rethrow) {\n        var args = _slice.call(arguments, 1);\n        if (lastExceptionStack) {\n            if (lastException === ex) {\n                return; // already caught by an inner catch block, ignore\n            } else {\n              processLastException();\n            }\n        }\n\n        var stack = TraceKit.computeStackTrace(ex);\n        lastExceptionStack = stack;\n        lastException = ex;\n        lastArgs = args;\n\n        // If the stack trace is incomplete, wait for 2 seconds for\n        // slow slow IE to see if onerror occurs or not before reporting\n        // this exception; otherwise, we will end up with an incomplete\n        // stack trace\n        window.setTimeout(function () {\n            if (lastException === ex) {\n                processLastException();\n            }\n        }, (stack.incomplete ? 2000 : 0));\n\n        if (rethrow !== false) {\n            throw ex; // re-throw to propagate to the top level (and cause window.onerror)\n        }\n    }\n\n    report.subscribe = subscribe;\n    report.unsubscribe = unsubscribe;\n    report.uninstall = unsubscribeAll;\n    return report;\n}());\n\n/**\n * TraceKit.computeStackTrace: cross-browser stack traces in JavaScript\n *\n * Syntax:\n *   s = TraceKit.computeStackTrace(exception) // consider using TraceKit.report instead (see below)\n * Returns:\n *   s.name              - exception name\n *   s.message           - exception message\n *   s.stack[i].url      - JavaScript or HTML file URL\n *   s.stack[i].func     - function name, or empty for anonymous functions (if guessing did not work)\n *   s.stack[i].args     - arguments passed to the function, if known\n *   s.stack[i].line     - line number, if known\n *   s.stack[i].column   - column number, if known\n *\n * Supports:\n *   - Firefox:  full stack trace with line numbers and unreliable column\n *               number on top frame\n *   - Opera 10: full stack trace with line and column numbers\n *   - Opera 9-: full stack trace with line numbers\n *   - Chrome:   full stack trace with line and column numbers\n *   - Safari:   line and column number for the topmost stacktrace element\n *               only\n *   - IE:       no line numbers whatsoever\n *\n * Tries to guess names of anonymous functions by looking for assignments\n * in the source code. In IE and Safari, we have to guess source file names\n * by searching for function bodies inside all page scripts. This will not\n * work for scripts that are loaded cross-domain.\n * Here be dragons: some function names may be guessed incorrectly, and\n * duplicate functions may be mismatched.\n *\n * TraceKit.computeStackTrace should only be used for tracing purposes.\n * Logging of unhandled exceptions should be done with TraceKit.report,\n * which builds on top of TraceKit.computeStackTrace and provides better\n * IE support by utilizing the window.onerror event to retrieve information\n * about the top of the stack.\n *\n * Note: In IE and Safari, no stack trace is recorded on the Error object,\n * so computeStackTrace instead walks its *own* chain of callers.\n * This means that:\n *  * in Safari, some methods may be missing from the stack trace;\n *  * in IE, the topmost function in the stack trace will always be the\n *    caller of computeStackTrace.\n *\n * This is okay for tracing (because you are likely to be calling\n * computeStackTrace from the function you want to be the topmost element\n * of the stack trace anyway), but not okay for logging unhandled\n * exceptions (because your catch block will likely be far away from the\n * inner function that actually caused the exception).\n *\n */\nTraceKit.computeStackTrace = (function computeStackTraceWrapper() {\n    /**\n     * Escapes special characters, except for whitespace, in a string to be\n     * used inside a regular expression as a string literal.\n     * @param {string} text The string.\n     * @return {string} The escaped string literal.\n     */\n    function escapeRegExp(text) {\n        return text.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#]/g, '\\\\$&');\n    }\n\n    /**\n     * Escapes special characters in a string to be used inside a regular\n     * expression as a string literal. Also ensures that HTML entities will\n     * be matched the same as their literal friends.\n     * @param {string} body The string.\n     * @return {string} The escaped string.\n     */\n    function escapeCodeAsRegExpForMatchingInsideHTML(body) {\n        return escapeRegExp(body).replace('<', '(?:<|&lt;)').replace('>', '(?:>|&gt;)').replace('&', '(?:&|&amp;)').replace('\"', '(?:\"|&quot;)').replace(/\\s+/g, '\\\\s+');\n    }\n\n    // Contents of Exception in various browsers.\n    //\n    // SAFARI:\n    // ex.message = Can't find variable: qq\n    // ex.line = 59\n    // ex.sourceId = 580238192\n    // ex.sourceURL = http://...\n    // ex.expressionBeginOffset = 96\n    // ex.expressionCaretOffset = 98\n    // ex.expressionEndOffset = 98\n    // ex.name = ReferenceError\n    //\n    // FIREFOX:\n    // ex.message = qq is not defined\n    // ex.fileName = http://...\n    // ex.lineNumber = 59\n    // ex.columnNumber = 69\n    // ex.stack = ...stack trace... (see the example below)\n    // ex.name = ReferenceError\n    //\n    // CHROME:\n    // ex.message = qq is not defined\n    // ex.name = ReferenceError\n    // ex.type = not_defined\n    // ex.arguments = ['aa']\n    // ex.stack = ...stack trace...\n    //\n    // INTERNET EXPLORER:\n    // ex.message = ...\n    // ex.name = ReferenceError\n    //\n    // OPERA:\n    // ex.message = ...message... (see the example below)\n    // ex.name = ReferenceError\n    // ex.opera#sourceloc = 11  (pretty much useless, duplicates the info in ex.message)\n    // ex.stacktrace = n/a; see 'opera:config#UserPrefs|Exceptions Have Stacktrace'\n\n    /**\n     * Computes stack trace information from the stack property.\n     * Chrome and Gecko use this property.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceFromStackProp(ex) {\n        if (isUndefined(ex.stack) || !ex.stack) return;\n\n        var chrome = /^\\s*at (.*?) ?\\(((?:file|https?|blob|chrome-extension|native|eval|<anonymous>).*?)(?::(\\d+))?(?::(\\d+))?\\)?\\s*$/i,\n            gecko = /^\\s*(.*?)(?:\\((.*?)\\))?(?:^|@)((?:file|https?|blob|chrome|\\[native).*?)(?::(\\d+))?(?::(\\d+))?\\s*$/i,\n            winjs = /^\\s*at (?:((?:\\[object object\\])?.+) )?\\(?((?:file|ms-appx|https?|blob):.*?):(\\d+)(?::(\\d+))?\\)?\\s*$/i,\n            lines = ex.stack.split('\\n'),\n            stack = [],\n            parts,\n            element,\n            reference = /^(.*) is undefined$/.exec(ex.message);\n\n        for (var i = 0, j = lines.length; i < j; ++i) {\n            if ((parts = chrome.exec(lines[i]))) {\n                var isNative = parts[2] && parts[2].indexOf('native') !== -1;\n                element = {\n                    'url': !isNative ? parts[2] : null,\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': isNative ? [parts[2]] : [],\n                    'line': parts[3] ? +parts[3] : null,\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ( parts = winjs.exec(lines[i]) ) {\n                element = {\n                    'url': parts[2],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': [],\n                    'line': +parts[3],\n                    'column': parts[4] ? +parts[4] : null\n                };\n            } else if ((parts = gecko.exec(lines[i]))) {\n                element = {\n                    'url': parts[3],\n                    'func': parts[1] || UNKNOWN_FUNCTION,\n                    'args': parts[2] ? parts[2].split(',') : [],\n                    'line': parts[4] ? +parts[4] : null,\n                    'column': parts[5] ? +parts[5] : null\n                };\n            } else {\n                continue;\n            }\n\n            if (!element.func && element.line) {\n                element.func = UNKNOWN_FUNCTION;\n            }\n\n            stack.push(element);\n        }\n\n        if (!stack.length) {\n            return null;\n        }\n\n        if (!stack[0].column && !isUndefined(ex.columnNumber)) {\n            // FireFox uses this awesome columnNumber property for its top frame\n            // Also note, Firefox's column number is 0-based and everything else expects 1-based,\n            // so adding 1\n            stack[0].column = ex.columnNumber + 1;\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref(),\n            'stack': stack\n        };\n    }\n\n    /**\n     * Adds information about the first frame to incomplete stack traces.\n     * Safari and IE require this to get complete data on the first frame.\n     * @param {Object.<string, *>} stackInfo Stack trace information from\n     * one of the compute* methods.\n     * @param {string} url The URL of the script that caused an error.\n     * @param {(number|string)} lineNo The line number of the script that\n     * caused an error.\n     * @param {string=} message The error generated by the browser, which\n     * hopefully contains the name of the object that caused the error.\n     * @return {boolean} Whether or not the stack information was\n     * augmented.\n     */\n    function augmentStackTraceWithInitialElement(stackInfo, url, lineNo, message) {\n        var initial = {\n            'url': url,\n            'line': lineNo\n        };\n\n        if (initial.url && initial.line) {\n            stackInfo.incomplete = false;\n\n            if (!initial.func) {\n                initial.func = UNKNOWN_FUNCTION;\n            }\n\n            if (stackInfo.stack.length > 0) {\n                if (stackInfo.stack[0].url === initial.url) {\n                    if (stackInfo.stack[0].line === initial.line) {\n                        return false; // already in stack trace\n                    } else if (!stackInfo.stack[0].line && stackInfo.stack[0].func === initial.func) {\n                        stackInfo.stack[0].line = initial.line;\n                        return false;\n                    }\n                }\n            }\n\n            stackInfo.stack.unshift(initial);\n            stackInfo.partial = true;\n            return true;\n        } else {\n            stackInfo.incomplete = true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Computes stack trace information by walking the arguments.caller\n     * chain at the time the exception occurred. This will cause earlier\n     * frames to be missed but is the only way to get any stack trace in\n     * Safari and IE. The top frame is restored by\n     * {@link augmentStackTraceWithInitialElement}.\n     * @param {Error} ex\n     * @return {?Object.<string, *>} Stack trace information.\n     */\n    function computeStackTraceByWalkingCallerChain(ex, depth) {\n        var functionName = /function\\s+([_$a-zA-Z\\xA0-\\uFFFF][_$a-zA-Z0-9\\xA0-\\uFFFF]*)?\\s*\\(/i,\n            stack = [],\n            funcs = {},\n            recursion = false,\n            parts,\n            item,\n            source;\n\n        for (var curr = computeStackTraceByWalkingCallerChain.caller; curr && !recursion; curr = curr.caller) {\n            if (curr === computeStackTrace || curr === TraceKit.report) {\n                // console.log('skipping internal function');\n                continue;\n            }\n\n            item = {\n                'url': null,\n                'func': UNKNOWN_FUNCTION,\n                'line': null,\n                'column': null\n            };\n\n            if (curr.name) {\n                item.func = curr.name;\n            } else if ((parts = functionName.exec(curr.toString()))) {\n                item.func = parts[1];\n            }\n\n            if (typeof item.func === 'undefined') {\n              try {\n                item.func = parts.input.substring(0, parts.input.indexOf('{'));\n              } catch (e) { }\n            }\n\n            if (funcs['' + curr]) {\n                recursion = true;\n            }else{\n                funcs['' + curr] = true;\n            }\n\n            stack.push(item);\n        }\n\n        if (depth) {\n            // console.log('depth is ' + depth);\n            // console.log('stack is ' + stack.length);\n            stack.splice(0, depth);\n        }\n\n        var result = {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref(),\n            'stack': stack\n        };\n        augmentStackTraceWithInitialElement(result, ex.sourceURL || ex.fileName, ex.line || ex.lineNumber, ex.message || ex.description);\n        return result;\n    }\n\n    /**\n     * Computes a stack trace for an exception.\n     * @param {Error} ex\n     * @param {(string|number)=} depth\n     */\n    function computeStackTrace(ex, depth) {\n        var stack = null;\n        depth = (depth == null ? 0 : +depth);\n\n        try {\n            stack = computeStackTraceFromStackProp(ex);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (TraceKit.debug) {\n                throw e;\n            }\n        }\n\n        try {\n            stack = computeStackTraceByWalkingCallerChain(ex, depth + 1);\n            if (stack) {\n                return stack;\n            }\n        } catch (e) {\n            if (TraceKit.debug) {\n                throw e;\n            }\n        }\n\n        return {\n            'name': ex.name,\n            'message': ex.message,\n            'url': getLocationHref()\n        };\n    }\n\n    computeStackTrace.augmentStackTraceWithInitialElement = augmentStackTraceWithInitialElement;\n    computeStackTrace.computeStackTraceFromStackProp = computeStackTraceFromStackProp;\n\n    return computeStackTrace;\n}());\n\nmodule.exports = TraceKit;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/raven-js/vendor/TraceKit/tracekit.js\n **/","var Raven = require('raven-js');\n\nRaven\n\t.config(process.env.SENTRY_DSN_CLIENT, {\n\t\tenvironment: process.env.NODE_ENV,\n\t\trelease:     process.env.npm_package_version\n\t})\n\t.install();\n\nmodule.exports = Raven;\n\n\n\n/** WEBPACK FOOTER **\n ** ./report/index.www.js\n **/"],"sourceRoot":""}